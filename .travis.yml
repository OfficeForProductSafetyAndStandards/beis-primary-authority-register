##############################################################################
### BUILD                                                                  ###
##############################################################################

language: php

php:
  - 7.1

services:
  - docker

cache:
  directories:
    - node_modules
    - tests/node_modules
    - $HOME/.composer/cache/files

before_install:
  - openssl aes-256-cbc -K $encrypted_4284186b3c3c_key -iv $encrypted_4284186b3c3c_iv
    -in auth.json.enc -out auth.json -d
  - openssl aes-256-cbc -K $encrypted_6db5a3a5521e_key -iv $encrypted_6db5a3a5521e_iv
    -in .env.continuous.enc -out cf/.env.continuous -d

install:

#-----------------------------------------------------------------------------
# Install Cloud Foundry CLI, for deployment, if on master branch
#-----------------------------------------------------------------------------

  - if [[ $TRAVIS_BRANCH == 'master' || $TRAVIS_TAG != '' ]]; then wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -; fi
  - if [[ $TRAVIS_BRANCH == 'master' || $TRAVIS_TAG != '' ]]; then echo "deb http://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list; fi
  - if [[ $TRAVIS_BRANCH == 'master' || $TRAVIS_TAG != '' ]]; then sudo apt-get update; fi
  - if [[ $TRAVIS_BRANCH == 'master' || $TRAVIS_TAG != '' ]]; then sudo apt-get install cf-cli; fi

#-----------------------------------------------------------------------------
# Bring up Docker containers
#-----------------------------------------------------------------------------

  - cd docker
  - docker-compose up -d
  - cd ..

#-----------------------------------------------------------------------------
# Install dependencies
#-----------------------------------------------------------------------------

  - phpenv config-rm xdebug.ini
  - composer install -v
  - docker exec -it par_beta_web bash -c "/usr/local/n/versions/node/7.2.1/bin/npm install"
  - docker exec -it par_beta_web bash -c "npm run gulp"
  - docker exec -it par_beta_web bash -c "cd /var/www/html/tests && /usr/local/n/versions/node/7.2.1/bin/npm install"

#-----------------------------------------------------------------------------
# Setup local config defaults
#-----------------------------------------------------------------------------

  - cp web/sites/example.settings.local.php web/sites/default/settings.local.php

#-----------------------------------------------------------------------------
# Create .env file
#-----------------------------------------------------------------------------

  - echo "S3_BUCKET_ARTIFACTS=$S3_BUCKET_ARTIFACTS" > .env
  - echo "S3_ACCESS_KEY=$S3_ACCESS_KEY" >> .env
  - echo "S3_SECRET_KEY=$S3_SECRET_KEY" >> .env
  - echo "PAR_HASH_SALT=$PAR_HASH_SALT" >> .env
  - echo "DATAFILE=$DATAFILE" >> .env
  - echo "APP_ENV=travis" >> .env
  - echo "BSK_USER=$BSK_USER" >> .env
  - echo "BSK_KEY=$BSK_KEY" >> .env
  - cat .env

#-----------------------------------------------------------------------------
# Import dev data from S3
#-----------------------------------------------------------------------------

  - sleep 5
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush sql-cli @dev < ../docker/fresh_drupal_postgres.sql"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush cc drush"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush cr"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush fsg s3backups $DATAFILE.tar.gz /dump.sql.tar.gz"
  - docker exec -i par_beta_web bash -c "cd / && tar --no-same-owner -zxvf dump.sql.tar.gz"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush sql-cli @dev < /$DATAFILE"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush sqlsan @dev -y"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush cc drush"
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush cr"

#-----------------------------------------------------------------------------
# Run further Drush commands
#-----------------------------------------------------------------------------

  - docker exec -i par_beta_web sh /var/www/html/drupal-update.sh /var/www/html
  - docker exec -i par_beta_web bash -c "cd web && ../vendor/bin/drush cex -n"

#-----------------------------------------------------------------------------
# Stamp the code with the build number
#-----------------------------------------------------------------------------

  - 'echo "#${TRAVIS_BUILD_NUMBER} ${TRAVIS_TAG}: $(date -u)" > web/build_version.txt'

##############################################################################
### TEST                                                                   ###
##############################################################################

script:
  - travis_retry docker exec -i par_beta_web /var/www/html/vendor/phpunit/phpunit/phpunit
  - travis_retry docker exec -ti par_beta_web bash -c "cd tests && ./node_modules/.bin/wdio wdio.BUILD.conf.js"
#-----------------------------------------------------------------------------
# Generate HTML reports with screenshots. HTML report location: tests/reports/allure-reports/index.html, TAR it up.
#-----------------------------------------------------------------------------
  - travis_retry docker exec -ti par_beta_web bash -c "cd tests && mkdir -p allure-results && ../node_modules/.bin/allure generate --clean ./allure-results/ && tar -cf allure-report.tar.gz reports/"
  - travis_retry docker exec -ti par_beta_web bash -c "cd tests && ./node_modules/.bin/pa11y-ci -T 1 -j -s 'http://localhost/sitemap.xml' -f 'https://par-beta-test.cloudapps.digital' -r 'http://localhost:80' > ./reports/wcag2aa_report.json"

#-----------------------------------------------------------------------------
# Remove .env file created in previous steps.
# If tagged build, tar up the files ready for S3.
#-----------------------------------------------------------------------------

  - rm .env
  - if [[ $TRAVIS_TAG != '' ]]; then mkdir $TRAVIS_TAG; fi
  - if [[ $TRAVIS_TAG != '' ]]; then tar --exclude="./$TRAVIS_TAG" -zcf $TRAVIS_TAG/$TRAVIS_TAG.tar.gz .; fi

##############################################################################
### DEPLOY                                                                 ###
##############################################################################

after_success:
  - cf login -a api.cloud.service.gov.uk -u chris.moreton@transformuk.com -p $CF_PASSWORD
  - cf/push-continuous.sh

#-----------------------------------------------------------------------------
# For tagged builds, send the packaged build to S3
#-----------------------------------------------------------------------------

deploy:
  - provider: s3
    access_key_id: $S3_ACCESS_KEY
    secret_access_key: $S3_SECRET_KEY
    bucket: "transform-par-beta-artifacts"
    upload-dir: builds
    skip_cleanup: true
    local_dir: $TRAVIS_TAG
    on:
      repo: TransformCore/beis-par-beta
      tags: true

##############################################################################
### STORE ARTIFACTS                                                        ###
##############################################################################

addons:
  artifacts:
    debug: false
    paths:
      - ./tests/reports
    target_paths: tests/$TRAVIS_BUILD_NUMBER
    bucket: transform-par-beta-artifacts
    s3_region: eu-west-1

notifications:
  slack:
    secure: oRuAo84heWUp6MVcM22dx/FZUV5HUVvsegEDaiVggQmNo2zYzNQhgAY7P9GpnaPWo53inCoFfwrwn9V+sj2uwUwrtWQg71qCTU3FIZicqYBB44rp+7/YdpuNqCYtbbY50UJpsZtqRIffWB4iS0YZ2bd+SkvsJskzRzbHC9qRjrSq0Hmb1DuxQCiE+M9TM7n4phY1dPTxTm1g1WwShr1zKXTfhDDK2k9r9kQGpJFP5rrE5cch0kBPJP29rgijeJq5uFS99+QyiVRJcqStXYl2JvKXTMS3sVk+OgSHeeRaaY0dbQSPcn4mTgcQKMVpfAUXVD6mUlkj4WYDXjdQSZdbgVvsX5tQg/6kG52wXgB+vDsmwKoBcTZLndNUQc9nCA02A+WVLyru318JmxwtaLo7CqRJArG3vItryMl7SxUA5QM1XB77iOe25m1aXEvJkUa54p6P7T62Gr0qfaEnCAeNRu33nS/16g+Znbp34jIwmmt+f3q2Uo3XV9cQgYj46ixzSjw5OPTHQSEpCHE8jtkXP80/N8jlXYLm7kTJapSWKEdbQf6J5a7Oj8Hv7Jq0QoPZmRpfa9L5PwJHd38p1JmxnVFbZMS4dQGyTwgyehf62cIDVi+5Pl3XPdQJ9FcMSTGOCXSrPGmJRHBt+o8bOuIzWMBHYqgnmHNNQ+oK/SEFhyw=
