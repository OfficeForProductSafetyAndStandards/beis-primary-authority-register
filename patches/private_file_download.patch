diff --git a/flysystem_s3.module b/flysystem_s3.module
new file mode 100644
index 0000000..bad1bde
--- /dev/null
+++ b/flysystem_s3.module
@@ -0,0 +1,30 @@
+<?php
+
+use Drupal\flysystem_s3\S3BinaryFileResponse;
+use Symfony\Component\HttpFoundation\File\Exception\FileNotFoundException;
+use Symfony\Component\HttpFoundation\Response;
+
+/**
+ * Implements hook_file_transfer().
+ */
+function flysystem_s3_file_download($uri) {
+  flysystem_s3_file_transfer($uri, []);
+}
+
+/**
+ * Implements hook_file_transfer().
+ */
+function flysystem_s3_file_transfer($uri, array $headers) {
+  // Stream a download for an S3 file using remote protocols.
+  $scheme = \Drupal::service('file_system')->uriScheme($uri);
+  $flysystem = \Drupal::service('flysystem_factory');
+  $settings = $flysystem->getSettings($scheme);
+  if (in_array($scheme, $flysystem->getSchemes()) && $settings['driver'] === 's3') {
+    try {
+      return new S3BinaryFileResponse($uri, 200, $headers);
+    }
+    catch (FileNotFoundException $e) {
+      return new Response(t('File @uri not found', array('@uri' =>$uri)), 404);
+    }
+  }
+}
diff --git a/src/S3BinaryFileResponse.php b/src/S3BinaryFileResponse.php
new file mode 100644
index 0000000..0d27ba4
--- /dev/null
+++ b/src/S3BinaryFileResponse.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Drupal\flysystem_s3;
+
+use Symfony\Component\HttpFoundation\File\File;
+use Symfony\Component\HttpFoundation\File\Exception\FileException;
+use Symfony\Component\HttpFoundation\BinaryFileResponse;
+
+/**
+ * S3BinaryFileResponse represents an HTTP response delivering a remote file from S3.
+ */
+class S3BinaryFileResponse extends BinaryFileResponse
+{
+
+    /**
+     * Sets the file to stream.
+     *
+     * @param \SplFileInfo|string $file               The file to stream
+     * @param string              $contentDisposition
+     * @param bool                $autoEtag
+     * @param bool                $autoLastModified
+     *
+     * @return $this
+     *
+     * @throws FileException
+     */
+    public function setFile($file, $contentDisposition = null, $autoEtag = false, $autoLastModified = true)
+    {
+        if (!$file instanceof File) {
+            if ($file instanceof \SplFileInfo) {
+                $file = new File($file->getPathname());
+            } else {
+                $file = new File((string) $file);
+            }
+        }
+
+        $this->file = $file;
+
+        if ($autoEtag) {
+            $this->setAutoEtag();
+        }
+
+        if ($autoLastModified) {
+            $this->setAutoLastModified();
+        }
+
+        if ($contentDisposition) {
+            $this->setContentDisposition($contentDisposition);
+        }
+
+        return $this;
+    }
+}
