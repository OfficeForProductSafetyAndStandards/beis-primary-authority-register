diff --git a/core/core.services.yml b/core/core.services.yml
index 3f9619f430..3bc7a9bdd0 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -758,6 +758,18 @@ services:
   entity_route_subscriber:
     class: Drupal\Core\EventSubscriber\EntityRouteProviderSubscriber
     arguments: ['@entity_type.manager']
+    tags:
+      - { name: event_subscriber }
+  entity_event_subscriber:
+    class: Drupal\Core\EventSubscriber\EntityEventSubscriber
+    arguments: ['@module_handler']
+    tags:
+      - { name: event_subscriber }
+  content_entity_event_subscriber:
+    class: Drupal\Core\EventSubscriber\ContentEntityEventSubscriber
+    arguments: ['@entity_type.manager', '@module_handler']
+    tags:
+      - { name: event_subscriber }
   entity.definition_update_manager:
     class: Drupal\Core\Entity\EntityDefinitionUpdateManager
     arguments: ['@entity_type.manager', '@entity.last_installed_schema.repository', '@entity_field.manager', '@entity_type.listener', '@field_storage_definition.listener']
diff --git a/core/lib/Drupal/Core/Entity/ContentEntityStorageBase.php b/core/lib/Drupal/Core/Entity/ContentEntityStorageBase.php
index 67a80f91a9..7b49691d10 100644
--- a/core/lib/Drupal/Core/Entity/ContentEntityStorageBase.php
+++ b/core/lib/Drupal/Core/Entity/ContentEntityStorageBase.php
@@ -878,26 +878,28 @@ function (callable $hook, string $module) use (&$entities) {
   }
 
   /**
-   * {@inheritdoc}
+   * Invokes a hook on behalf of the entity.
+   *
+   * @param string $hook
+   *   A content entity hook name.
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity object.
    */
   protected function invokeHook($hook, EntityInterface $entity) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
-
-    switch ($hook) {
-      case 'presave':
-        $this->invokeFieldMethod('preSave', $entity);
-        break;
-
-      case 'insert':
-        $this->invokeFieldPostSave($entity, FALSE);
-        break;
-
-      case 'update':
-        $this->invokeFieldPostSave($entity, TRUE);
-        break;
+    $deprecated_hooks = [
+      'create',
+      'delete',
+      'insert',
+      'predelete',
+      'presave',
+      'update',
+    ];
+    if (!in_array($hook, $deprecated_hooks)) {
+      // Invoke the hook.
+      $this->moduleHandler->invokeAll($this->entityTypeId . '_' . $hook, [$entity]);
+      // Invoke the respective entity-level hook.
+      $this->moduleHandler->invokeAll('entity_' . $hook, [$entity, $this->entityTypeId]);
     }
-
-    parent::invokeHook($hook, $entity);
   }
 
   /**
@@ -914,7 +916,7 @@ protected function invokeHook($hook, EntityInterface $entity) {
    *   A multidimensional associative array of results, keyed by entity
    *   translation language code and field name.
    */
-  protected function invokeFieldMethod($method, ContentEntityInterface $entity) {
+  public function invokeFieldMethod($method, ContentEntityInterface $entity) {
     $result = [];
     $args = array_slice(func_get_args(), 2);
     $langcodes = array_keys($entity->getTranslationLanguages());
@@ -977,7 +979,7 @@ protected function invokeFieldMethod($method, ContentEntityInterface $entity) {
    * @param bool $update
    *   Specifies whether the entity is being updated or created.
    */
-  protected function invokeFieldPostSave(ContentEntityInterface $entity, $update) {
+  public function invokeFieldPostSave(ContentEntityInterface $entity, $update) {
     // For each entity translation this returns an array of resave flags keyed
     // by field name, thus we merge them to obtain a list of fields to resave.
     $resave = [];
diff --git a/core/lib/Drupal/Core/Entity/EntityStorageBase.php b/core/lib/Drupal/Core/Entity/EntityStorageBase.php
index a117120141..a83578dba6 100644
--- a/core/lib/Drupal/Core/Entity/EntityStorageBase.php
+++ b/core/lib/Drupal/Core/Entity/EntityStorageBase.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Core\Entity;
 
+use Drupal\Core\Entity\Event\EntityCreateEvent;
+use Drupal\Core\Entity\Event\EntityDeleteEvent;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityPreDeleteEvent;
+use Drupal\Core\Entity\Event\EntityPreSaveEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 
@@ -201,22 +207,6 @@ protected function setStaticCache(array $entities) {
     }
   }
 
-  /**
-   * Invokes a hook on behalf of the entity.
-   *
-   * @param string $hook
-   *   One of 'create', 'presave', 'insert', 'update', 'predelete', 'delete', or
-   *   'revision_delete'.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   The entity object.
-   */
-  protected function invokeHook($hook, EntityInterface $entity) {
-    // Invoke the hook.
-    $this->moduleHandler()->invokeAll($this->entityTypeId . '_' . $hook, [$entity]);
-    // Invoke the respective entity-level hook.
-    $this->moduleHandler()->invokeAll('entity_' . $hook, [$entity]);
-  }
-
   /**
    * {@inheritdoc}
    */
@@ -236,7 +226,9 @@ public function create(array $values = []) {
 
     // Modules might need to add or change the data initially held by the new
     // entity object, for instance to fill-in default values.
-    $this->invokeHook('create', $entity);
+    $event = new EntityCreateEvent($entity);
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+    $event_dispatcher->dispatch($event);
 
     return $entity;
   }
@@ -446,21 +438,25 @@ public function delete(array $entities) {
     $entities_by_class = $this->getEntitiesByClass($entities);
 
     // Allow code to run before deleting.
-    foreach ($entities_by_class as $entity_class => &$items) {
-      $entity_class::preDelete($this, $items);
-      foreach ($items as $entity) {
-        $this->invokeHook('predelete', $entity);
-      }
+    $entity_class = $this->entityClass;
+    $entity_class::preDelete($this, $keyed_entities);
+
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+
+    foreach ($keyed_entities as $entity) {
+      $event = new EntityPreDeleteEvent($entity);
+      $event_dispatcher->dispatch($event);
+    }
 
       // Perform the delete and reset the static cache for the deleted entities.
       $this->doDelete($items);
       $this->resetCache(array_keys($items));
 
-      // Allow code to run after deleting.
-      $entity_class::postDelete($this, $items);
-      foreach ($items as $entity) {
-        $this->invokeHook('delete', $entity);
-      }
+    // Allow code to run after deleting.
+    $entity_class::postDelete($this, $keyed_entities);
+    foreach ($keyed_entities as $entity) {
+      $event = new EntityDeleteEvent($entity);
+      $event_dispatcher->dispatch($event);
     }
   }
 
@@ -479,13 +475,13 @@ public function save(EntityInterface $entity) {
     // Track if this entity is new.
     $is_new = $entity->isNew();
 
-    // Execute presave logic and invoke the related hooks.
+    // Execute presave logic and dispatch the related events.
     $id = $this->doPreSave($entity);
 
     // Perform the save and reset the static cache for the changed entity.
     $return = $this->doSave($id, $entity);
 
-    // Execute post save logic and invoke the related hooks.
+    // Execute post save logic and dispatch the related events.
     $this->doPostSave($entity, !$is_new);
 
     return $return;
@@ -526,7 +522,10 @@ protected function doPreSave(EntityInterface $entity) {
 
     // Allow code to run before saving.
     $entity->preSave($this);
-    $this->invokeHook('presave', $entity);
+
+    $event = new EntityPreSaveEvent($entity);
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+    $event_dispatcher->dispatch($event);
 
     return $id;
   }
@@ -561,7 +560,15 @@ protected function doPostSave(EntityInterface $entity, $update) {
 
     // Allow code to run after saving.
     $entity->postSave($this, $update);
-    $this->invokeHook($update ? 'update' : 'insert', $entity);
+
+    if ($update) {
+      $event = new EntityUpdateEvent($entity);
+    }
+    else {
+      $event = new EntityInsertEvent($entity);
+    }
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+    $event_dispatcher->dispatch($event);
 
     // After saving, this is now the "original entity", and subsequent saves
     // will be updates instead of inserts, and updates must always be able to
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityCreateEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityCreateEvent.php
new file mode 100644
index 0000000000..ed26272929
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityCreateEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity create event.
+ */
+class EntityCreateEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityDeleteEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityDeleteEvent.php
new file mode 100644
index 0000000000..438e8e3c08
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityDeleteEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity delete event.
+ */
+class EntityDeleteEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityInsertEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityInsertEvent.php
new file mode 100644
index 0000000000..e572d00088
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityInsertEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity insert event.
+ */
+class EntityInsertEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityPreDeleteEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityPreDeleteEvent.php
new file mode 100644
index 0000000000..1b8e1e9841
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityPreDeleteEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity predelete event.
+ */
+class EntityPreDeleteEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityPreSaveEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityPreSaveEvent.php
new file mode 100644
index 0000000000..8374545891
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityPreSaveEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity presave event.
+ */
+class EntityPreSaveEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EntityUpdateEvent.php b/core/lib/Drupal/Core/Entity/Event/EntityUpdateEvent.php
new file mode 100644
index 0000000000..983f433e60
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EntityUpdateEvent.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+/**
+ * Defines the entity update event.
+ */
+class EntityUpdateEvent extends EventBase {}
diff --git a/core/lib/Drupal/Core/Entity/Event/EventBase.php b/core/lib/Drupal/Core/Entity/Event/EventBase.php
new file mode 100644
index 0000000000..1f7d06f1a4
--- /dev/null
+++ b/core/lib/Drupal/Core/Entity/Event/EventBase.php
@@ -0,0 +1,40 @@
+<?php
+
+namespace Drupal\Core\Entity\Event;
+
+use Drupal\Component\EventDispatcher\Event;
+use Drupal\Core\Entity\EntityInterface;
+
+/**
+ * Entity event base class.
+ */
+class EventBase extends Event {
+
+  /**
+   * The entity object.
+   *
+   * @var \Drupal\Core\Entity\EntityInterface
+   */
+  protected $entity;
+
+  /**
+   * EventBase constructor.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity object.
+   */
+  public function __construct(EntityInterface $entity) {
+    $this->entity = $entity;
+  }
+
+  /**
+   * Returns the entity wrapped by this event.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface
+   *   The entity object.
+   */
+  public function getEntity() {
+    return $this->entity;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/EventSubscriber/ContentEntityEventSubscriber.php b/core/lib/Drupal/Core/EventSubscriber/ContentEntityEventSubscriber.php
new file mode 100644
index 0000000000..e221576909
--- /dev/null
+++ b/core/lib/Drupal/Core/EventSubscriber/ContentEntityEventSubscriber.php
@@ -0,0 +1,100 @@
+<?php
+
+namespace Drupal\Core\EventSubscriber;
+
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityPreSaveEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+
+/**
+ * Executes entity hooks.
+ */
+class ContentEntityEventSubscriber implements EventSubscriberInterface {
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * Constructs a new EntityRouteProviderSubscriber instance.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   *
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->moduleHandler = $module_handler;
+  }
+
+  /**
+   * Execute field post save actions.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityInsertEvent $event
+   *   The entity event.
+   */
+  public function onEntityInsert(EntityInsertEvent $event) {
+    $entity = $event->getEntity();
+    $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
+    if ($entity instanceof ContentEntityBase && method_exists($storage, 'invokeFieldPostSave')) {
+      $storage->invokeFieldPostSave($entity, FALSE);
+    }
+  }
+
+  /**
+   * Execute presave actions.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityInsertEvent $event
+   *   The entity event.
+   */
+  public function onEntityPreSave(EntityPreSaveEvent $event) {
+    $entity = $event->getEntity();
+    $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
+    if ($entity instanceof ContentEntityBase && method_exists($storage, 'invokeFieldMethod')) {
+      $storage->invokeFieldMethod('preSave', $entity);
+    }
+  }
+
+  /**
+   * Execute field post save actions.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityUpdateEvent $event
+   *   The entity event.
+   */
+  public function onEntityUpdate(EntityUpdateEvent $event) {
+    $entity = $event->getEntity();
+    $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
+    if ($entity instanceof ContentEntityBase && method_exists($storage, 'invokeFieldPostSave')) {
+      $storage->invokeFieldPostSave($entity, TRUE);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    // Hooks should be executed before other subscribers for BC.
+    $priority = -999;
+    $events[EntityInsertEvent::class][] = ['onEntityInsert', $priority];
+    $events[EntityPreSaveEvent::class][] = ['onEntityPreSave', $priority];
+    $events[EntityUpdateEvent::class][] = ['onEntityUpdate', $priority];
+    return $events;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/EventSubscriber/EntityEventSubscriber.php b/core/lib/Drupal/Core/EventSubscriber/EntityEventSubscriber.php
new file mode 100644
index 0000000000..91ac95ec9f
--- /dev/null
+++ b/core/lib/Drupal/Core/EventSubscriber/EntityEventSubscriber.php
@@ -0,0 +1,125 @@
+<?php
+
+namespace Drupal\Core\EventSubscriber;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Event\EntityCreateEvent;
+use Drupal\Core\Entity\Event\EntityPreSaveEvent;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
+use Drupal\Core\Entity\Event\EntityPreDeleteEvent;
+use Drupal\Core\Entity\Event\EntityDeleteEvent;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+
+/**
+ * Executes entity hooks.
+ */
+class EntityEventSubscriber implements EventSubscriberInterface {
+
+  /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * Constructs a new EntityRouteProviderSubscriber instance.
+   *
+   * @todo Inject entity type handler to subscribe to entity type level hooks.
+   *
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
+   */
+  public function __construct(ModuleHandlerInterface $module_handler) {
+    $this->moduleHandler = $module_handler;
+  }
+
+  /**
+   * Invoke entity create hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityCreateEvent $event
+   *   The entity event.
+   */
+  public function onEntityCreate(EntityCreateEvent $event) {
+    $this->invokeHooks('create', $event->getEntity());
+  }
+
+  /**
+   * Invoke entity presave hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityPreSaveEvent $event
+   *   The entity event.
+   */
+  public function onEntityPreSave(EntityPreSaveEvent $event) {
+    $this->invokeHooks('presave', $event->getEntity());
+  }
+
+  /**
+   * Invoke entity insert hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityInsertEvent $event
+   *   The entity event.
+   */
+  public function onEntityInsert(EntityInsertEvent $event) {
+    $this->invokeHooks('insert', $event->getEntity());
+  }
+
+  /**
+   * Invoke entity update hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityUpdateEvent $event
+   *   The entity event.
+   */
+  public function onEntityUpdate(EntityUpdateEvent $event) {
+    $this->invokeHooks('update', $event->getEntity());
+  }
+
+  /**
+   * Invoke entity predelete hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityPreDeleteEvent $event
+   *   The entity event.
+   */
+  public function onEntityPreDelete(EntityPreDeleteEvent $event) {
+    $this->invokeHooks('predelete', $event->getEntity());
+  }
+
+  /**
+   * Invoke entity delete hooks.
+   *
+   * @param \Drupal\Core\Entity\Event\EntityDeleteEvent $event
+   *   The entity event.
+   */
+  public function onEntityDelete(EntityDeleteEvent $event) {
+    $this->invokeHooks('delete', $event->getEntity());
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    // Hooks should be executed before other subscribers for BC.
+    $priority = -1000;
+    $events[EntityCreateEvent::class][] = ['onEntityCreate', $priority];
+    $events[EntityPreSaveEvent::class][] = ['onEntityPreSave', $priority];
+    $events[EntityInsertEvent::class][] = ['onEntityInsert', $priority];
+    $events[EntityUpdateEvent::class][] = ['onEntityUpdate', $priority];
+    $events[EntityPreDeleteEvent::class][] = ['onEntityPreDelete', $priority];
+    $events[EntityDeleteEvent::class][] = ['onEntityDelete', $priority];
+    return $events;
+  }
+
+  /**
+   * Invoke hook_entity_{$hook} and hook_ENTITY_TYPE_{$hook}.
+   *
+   * @param string $hook
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   */
+  private function invokeHooks(string $hook, EntityInterface $entity) {
+    $this->moduleHandler->invokeAll($entity->getEntityTypeId() . '_' . $hook, [$entity]);
+    $this->moduleHandler->invokeAll('entity_' . $hook, [$entity]);
+  }
+
+}
diff --git a/core/modules/system/tests/modules/entity_test_event/entity_test_event.info.yml b/core/modules/system/tests/modules/entity_test_event/entity_test_event.info.yml
new file mode 100644
index 0000000000..9a0bfb07bd
--- /dev/null
+++ b/core/modules/system/tests/modules/entity_test_event/entity_test_event.info.yml
@@ -0,0 +1,5 @@
+name: 'Entity test event'
+type: module
+description: 'Provides entity events.'
+package: Testing
+version: VERSION
diff --git a/core/modules/system/tests/modules/entity_test_event/entity_test_event.services.yml b/core/modules/system/tests/modules/entity_test_event/entity_test_event.services.yml
new file mode 100644
index 0000000000..e20270cd9e
--- /dev/null
+++ b/core/modules/system/tests/modules/entity_test_event/entity_test_event.services.yml
@@ -0,0 +1,5 @@
+services:
+  entity_test_event.event_subscriber:
+    class: \Drupal\entity_test_event\EventSubscriber\TestEventSubscriber
+    tags:
+      - { name: event_subscriber }
diff --git a/core/modules/system/tests/modules/entity_test_event/src/EventSubscriber/TestEventSubscriber.php b/core/modules/system/tests/modules/entity_test_event/src/EventSubscriber/TestEventSubscriber.php
new file mode 100644
index 0000000000..6385c14cf5
--- /dev/null
+++ b/core/modules/system/tests/modules/entity_test_event/src/EventSubscriber/TestEventSubscriber.php
@@ -0,0 +1,66 @@
+<?php
+
+namespace Drupal\entity_test_event\EventSubscriber;
+
+use Drupal\Core\Entity\Event\EntityDeleteEvent;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
+use Drupal\Core\Entity\Event\EventBase;
+use Drupal\entity_test\Entity\EntityTest;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+
+/**
+ * Defines the test event subscriber class.
+ */
+class TestEventSubscriber implements EventSubscriberInterface {
+
+  /**
+   * Test EntityInsertEvent.
+   *
+   * @param \Drupal\Core\Entity\EntityInsertEvent $event
+   *   Insert event.
+   */
+  public function onInsert(EventBase $event) {
+    if ($event->getEntity()->name->value === 'hei') {
+      $event->getEntity()->name->value .= ' ho';
+    }
+  }
+
+  /**
+   * Test EntityUpdateEvent.
+   *
+   * @param \Drupal\Core\Entity\EntityEvent $event
+   *   Update event.
+   */
+  public function onUpdate(EventBase $event) {
+    if ($event->getEntity()->name->value === 'hei') {
+      $event->getEntity()->name->value .= ' ho';
+    }
+  }
+
+  /**
+   * Test EntityDeleteEvent.
+   *
+   * @param \Drupal\Core\Entity\EntityDeleteEvent $event
+   *   Delete event.
+   */
+  public function onDelete(EventBase $event) {
+    if ($event->getEntity()->name->value === 'hei ho') {
+      EntityTest::create([
+        'name' => 'hei_ho',
+      ])->save();
+      $event->getEntity()->name->value .= ' ho';
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    $events[EntityInsertEvent::class] = 'onInsert';
+    $events[EntityUpdateEvent::class] = 'onUpdate';
+    $events[EntityDeleteEvent::class] = 'onDelete';
+    return $events;
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityEventsTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityEventsTest.php
new file mode 100644
index 0000000000..ff9537627b
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityEventsTest.php
@@ -0,0 +1,79 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Entity;
+
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\KernelTests\KernelTestBase;
+
+/**
+ * @group Entity
+ */
+class EntityEventsTest extends KernelTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['entity_test', 'entity_test_event', 'user'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() : void {
+    parent::setUp();
+
+    $this->installEntitySchema('entity_test');
+  }
+
+  /**
+   * Test entity insert event.
+   *
+   * @see \Drupal\entity_test_event\EventSubscriber\TestEventSubscriber
+   */
+  public function testInsertEvent() {
+    $entity = EntityTest::create([
+      'name' => 'hei',
+    ]);
+    $entity->save();
+    $this->assertEquals('hei ho', $entity->name->value);
+  }
+
+  /**
+   * Test entity update event.
+   *
+   * @see \Drupal\entity_test_event\EventSubscriber\TestEventSubscriber
+   */
+  public function testUpdateEvent() {
+    $entity = EntityTest::create([
+      'name' => 'meh',
+    ]);
+    $entity->save();
+    $this->assertEquals('meh', $entity->name->value);
+
+    $entity->name->value = 'hei';
+    $entity->save();
+    $this->assertEquals('hei ho', $entity->name->value);
+  }
+
+  /**
+   * Test entity delete event.
+   *
+   * @see \Drupal\entity_test_event\EventSubscriber\TestEventSubscriber
+   */
+  public function testDeleteEvent() {
+    $entities = \Drupal::entityTypeManager()->getStorage('entity_test')
+      ->loadByProperties(['name' => 'hei_ho']);
+    $this->assertCount(0, $entities);
+
+    $entity = EntityTest::create([
+      'name' => 'hei',
+    ]);
+    $entity->save();
+    $entity->delete();
+
+    // Note the delete event creates another entity.
+    $entities = \Drupal::entityTypeManager()->getStorage('entity_test')
+      ->loadByProperties(['name' => 'hei_ho']);
+    $this->assertCount(1, $entities);
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityStorageTest.php b/core/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityStorageTest.php
index 53e5ab25a1..13b496e125 100644
--- a/core/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityStorageTest.php
+++ b/core/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityStorageTest.php
@@ -23,6 +23,12 @@
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Event\EntityCreateEvent;
+use Drupal\Core\Entity\Event\EntityDeleteEvent;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityPreDeleteEvent;
+use Drupal\Core\Entity\Event\EntityPreSaveEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
 use Drupal\Core\Entity\Query\QueryFactoryInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -31,6 +37,7 @@
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
  * @coversDefaultClass \Drupal\Core\Config\Entity\ConfigEntityStorage
@@ -66,6 +73,13 @@ class ConfigEntityStorageTest extends UnitTestCase {
    */
   protected $languageManager;
 
+  /**
+   * The event dispatcher.
+   *
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ProphecyInterface
+   */
+  protected $eventDispatcher;
+
   /**
    * The config storage.
    *
@@ -136,6 +150,7 @@ protected function setUp(): void {
 
     $this->configFactory = $this->prophesize(ConfigFactoryInterface::class);
 
+    $this->eventDispatcher = $this->prophesize(EventDispatcherInterface::class);
     $this->entityQuery = $this->prophesize(QueryInterface::class);
     $entity_query_factory = $this->prophesize(QueryFactoryInterface::class);
     $entity_query_factory->get($entity_type, 'AND')->willReturn($this->entityQuery->reveal());
@@ -162,6 +177,7 @@ protected function setUp(): void {
     $container->set('cache_tags.invalidator', $this->cacheTagsInvalidator->reveal());
     $container->set('config.manager', $this->configManager->reveal());
     $container->set('language_manager', $this->languageManager->reveal());
+    $container->set('event_dispatcher', $this->eventDispatcher->reveal());
     \Drupal::setContainer($container);
 
   }
@@ -180,10 +196,8 @@ public function testCreateWithPredefinedUuid(): void {
     $entity->setOriginalId('foo');
     $entity->enforceIsNew();
 
-    $this->moduleHandler->invokeAll('test_entity_type_create', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_create', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
+    $event = new EntityCreateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->uuidService->generate()->shouldNotBeCalled();
 
@@ -209,10 +223,8 @@ public function testCreate() {
     $entity->setOriginalId('foo');
     $entity->enforceIsNew();
 
-    $this->moduleHandler->invokeAll('test_entity_type_create', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_create', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
+    $event = new EntityCreateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->uuidService->generate()->willReturn('bar');
 
@@ -281,14 +293,10 @@ public function testSaveInsert(EntityInterface $entity) {
     $this->configFactory->getEditable('the_provider.the_config_prefix.foo')
       ->willReturn($config_object->reveal());
 
-    $this->moduleHandler->invokeAll('test_entity_type_presave', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_presave', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('test_entity_type_insert', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_insert', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
+    $event = new EntityPreSaveEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityInsertEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->entityQuery->condition('uuid', 'bar')->willReturn($this->entityQuery);
     $this->entityQuery->execute()->willReturn([]);
@@ -341,14 +349,10 @@ public function testSaveUpdate(EntityInterface $entity) {
       ->willReturn($config_object->reveal())
       ->shouldBeCalledTimes(1);
 
-    $this->moduleHandler->invokeAll('test_entity_type_presave', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_presave', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('test_entity_type_update', [$entity])
-      ->shouldBeCalled();
-    $this->moduleHandler->invokeAll('entity_update', [$entity, 'test_entity_type'])
-      ->shouldBeCalled();
+    $event = new EntityPreSaveEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityUpdateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->entityQuery->condition('uuid', 'bar')->willReturn($this->entityQuery);
     $this->entityQuery->execute()->willReturn([$entity->id()]);
@@ -677,15 +681,11 @@ public function testDelete(): void {
       $this->configFactory->getEditable("the_provider.the_config_prefix.$id")
         ->willReturn($config_object->reveal());
 
-      $this->moduleHandler->invokeAll('test_entity_type_predelete', [$entity])
-        ->shouldBeCalled();
-      $this->moduleHandler->invokeAll('entity_predelete', [$entity, 'test_entity_type'])
-        ->shouldBeCalled();
+      $event = new EntityPreDeleteEvent($entity);
+      $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
-      $this->moduleHandler->invokeAll('test_entity_type_delete', [$entity])
-        ->shouldBeCalled();
-      $this->moduleHandler->invokeAll('entity_delete', [$entity, 'test_entity_type'])
-        ->shouldBeCalled();
+      $event = new EntityDeleteEvent($entity);
+      $this->eventDispatcher->dispatch($event)->shouldBeCalled();
     }
 
     $this->cacheTagsInvalidator->invalidateTags([$this->entityTypeId . '_list'])
diff --git a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
index 2c6546f072..c7ead49448 100644
--- a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
@@ -14,9 +14,16 @@
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Event\EntityCreateEvent;
+use Drupal\Core\Entity\Event\EntityDeleteEvent;
+use Drupal\Core\Entity\Event\EntityInsertEvent;
+use Drupal\Core\Entity\Event\EntityPreDeleteEvent;
+use Drupal\Core\Entity\Event\EntityPreSaveEvent;
+use Drupal\Core\Entity\Event\EntityUpdateEvent;
 use Drupal\Core\Language\Language;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Entity\KeyValueStore\KeyValueEntityStorage;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
  * @coversDefaultClass \Drupal\Core\Entity\KeyValueStore\KeyValueEntityStorage
@@ -85,6 +92,13 @@ class KeyValueEntityStorageTest extends UnitTestCase {
    */
   protected $cacheTagsInvalidator;
 
+  /**
+   * The event dispatcher.
+   *
+   * @var Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ProphecyInterface
+   */
+  protected $eventDispatcher;
+
   /**
    * {@inheritdoc}
    */
@@ -136,7 +150,7 @@ protected function setUpKeyValueEntityStorage($uuid_key = 'uuid') {
       ->willReturn($language);
     $this->languageManager->expects($this->any())
       ->method('getCurrentLanguage')
-      ->willReturn($language);
+      ->will($this->returnValue($language));
 
     $this->entityStorage = new KeyValueEntityStorage($this->entityType, $this->keyValueStore, $this->uuidService, $this->languageManager, new MemoryCache(new Time()));
     $this->entityStorage->setModuleHandler($this->moduleHandler);
@@ -144,6 +158,7 @@ protected function setUpKeyValueEntityStorage($uuid_key = 'uuid') {
     $container = new ContainerBuilder();
     $container->set('entity_field.manager', $this->entityFieldManager);
     $container->set('entity_type.manager', $this->entityTypeManager);
+    $container->set('event_dispatcher', $event_dispatcher->reveal());
     $container->set('language_manager', $this->languageManager);
     $container->set('cache_tags.invalidator', $this->cacheTagsInvalidator);
     \Drupal::setContainer($container);
@@ -159,12 +174,6 @@ public function testCreateWithPredefinedUuid(): void {
       ->willReturn(get_class($this->getMockEntity()));
     $this->setUpKeyValueEntityStorage();
 
-    $hooks = ['test_entity_type_create', 'entity_create'];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -172,6 +181,9 @@ public function testCreateWithPredefinedUuid(): void {
     $this->assertInstanceOf('Drupal\Core\Entity\EntityInterface', $entity);
     $this->assertSame('foo', $entity->id());
     $this->assertSame('baz', $entity->uuid());
+
+    $event = new EntityCreateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
   }
 
   /**
@@ -185,12 +197,6 @@ public function testCreateWithoutUuidKey(): void {
       ->willReturn(get_class($this->getMockEntity()));
     $this->setUpKeyValueEntityStorage(NULL);
 
-    $hooks = ['test_entity_type_create', 'entity_create'];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -198,6 +204,9 @@ public function testCreateWithoutUuidKey(): void {
     $this->assertInstanceOf('Drupal\Core\Entity\EntityInterface', $entity);
     $this->assertSame('foo', $entity->id());
     $this->assertSame('baz', $entity->uuid());
+
+    $event = new EntityCreateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
   }
 
   /**
@@ -213,12 +222,6 @@ public function testCreate() {
       ->willReturn(get_class($entity));
     $this->setUpKeyValueEntityStorage();
 
-    $hooks = ['test_entity_type_create', 'entity_create'];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
     $this->uuidService->expects($this->once())
       ->method('generate')
       ->willReturn('bar');
@@ -227,6 +230,10 @@ public function testCreate() {
     $this->assertInstanceOf('Drupal\Core\Entity\EntityInterface', $entity);
     $this->assertSame('foo', $entity->id());
     $this->assertSame('bar', $entity->uuid());
+
+    $event = new EntityCreateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+
     return $entity;
   }
 
@@ -258,13 +265,10 @@ public function testSaveInsert(EntityInterface $entity) {
       ->method('toArray')
       ->willReturn($expected);
 
-    $hooks = ['test_entity_type_presave', 'entity_presave', 'test_entity_type_insert', 'entity_insert'];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
-
+    $event = new EntityPreSaveEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityInsertEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
     $this->keyValueStore->expects($this->once())
       ->method('set')
       ->with('foo', $expected);
@@ -302,12 +306,19 @@ public function testSaveUpdate(EntityInterface $entity) {
     $this->keyValueStore->expects($this->never())
       ->method('delete');
 
-    $hooks = ['test_entity_type_presave', 'entity_presave', 'test_entity_type_update', 'entity_update'];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
+    $this->moduleHandler->expects($this->at(0))
+      ->method('getImplementations')
+      ->with('entity_load')
+      ->will($this->returnValue([]));
+    $this->moduleHandler->expects($this->at(1))
+      ->method('getImplementations')
+      ->with('test_entity_type_load')
+      ->will($this->returnValue([]));
+
+    $event = new EntityPreSaveEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityUpdateEvent($entity);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->keyValueStore->expects($this->once())
       ->method('set')
@@ -583,21 +594,14 @@ public function testDelete(): void {
     $entities['bar'] = $this->getMockEntity(EntityBaseTest::class, [['id' => 'bar']]);
     $this->setUpKeyValueEntityStorage();
 
-    $hooks = [
-      'test_entity_type_predelete',
-      'entity_predelete',
-      'test_entity_type_predelete',
-      'entity_predelete',
-      'test_entity_type_delete',
-      'entity_delete',
-      'test_entity_type_delete',
-      'entity_delete',
-    ];
-    $this->moduleHandler->expects($this->exactly(count($hooks)))
-      ->method('invokeAll')
-      ->with($this->callback(function (string $hook) use (&$hooks): bool {
-        return array_shift($hooks) === $hook;
-      }));
+    $event = new EntityPreDeleteEvent($entities['foo']);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityPreDeleteEvent($entities['bar']);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityDeleteEvent($entities['foo']);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
+    $event = new EntityDeleteEvent($entities['bar']);
+    $this->eventDispatcher->dispatch($event)->shouldBeCalled();
 
     $this->keyValueStore->expects($this->once())
       ->method('deleteMultiple')
diff --git a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageTest.php b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageTest.php
index e27a27dbed..bd07448f7f 100644
--- a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageTest.php
@@ -103,6 +103,13 @@ class SqlContentEntityStorageTest extends UnitTestCase {
    */
   protected $languageManager;
 
+  /**
+   * The event dispatcher.
+   *
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
+   */
+  protected $eventDispatcher;
+
   /**
    * The database connection to use.
    *
@@ -130,6 +137,7 @@ protected function setUp(): void {
     $this->moduleHandler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $this->cache = $this->createMock('Drupal\Core\Cache\CacheBackendInterface');
     $this->languageManager = $this->createMock('Drupal\Core\Language\LanguageManagerInterface');
+    $this->eventDispatcher = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $this->languageManager->expects($this->any())
       ->method('getDefaultLanguage')
       ->willReturn(new Language(['langcode' => 'en']));
@@ -137,8 +145,9 @@ protected function setUp(): void {
       ->disableOriginalConstructor()
       ->getMock();
 
-    $this->container->set('entity_type.manager', $this->entityTypeManager->reveal());
-    $this->container->set('entity_field.manager', $this->entityFieldManager->reveal());
+    $this->container->set('entity_type.manager', $this->entityTypeManager);
+    $this->container->set('entity_field.manager', $this->entityFieldManager);
+    $this->container->set('event_dispatcher', $this->eventDispatcher);
   }
 
   /**
