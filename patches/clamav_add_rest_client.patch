diff --git a/clamav.install b/clamav.install
index 1729e0d..6efefbb 100644
--- a/clamav.install
+++ b/clamav.install
@@ -30,8 +30,12 @@ function clamav_requirements($phase) {
       case Config::MODE_UNIX_SOCKET:
         $scanner = new Scanner\DaemonUnixSocket($config);
         break;
+
+      case Config::MODE_DAEMON_REST_CLIENT:
+        $scanner = new Scanner\DaemonRestClient($config);
+        break;
     }
-  
+
     if ($version = $scanner->version()) {
       $requirements['clamav'] = array(
         'title' => t('ClamAV version'),
diff --git a/config/install/clamav.settings.yml b/config/install/clamav.settings.yml
index 657f5ef..f7f4ed1 100644
--- a/config/install/clamav.settings.yml
+++ b/config/install/clamav.settings.yml
@@ -18,3 +18,6 @@ mode_daemon_tcpip:
 
 mode_daemon_unixsocket:
   unixsocket: '/var/clamav/clamd'
+
+mode_daemon_rest_client:
+  endpoint: ''
diff --git a/src/Config.php b/src/Config.php
index f977c8f..0111ca2 100644
--- a/src/Config.php
+++ b/src/Config.php
@@ -3,10 +3,11 @@
 namespace Drupal\clamav;
 
 
-class Config  {
+class Config {
   const MODE_DAEMON = 0;
   const MODE_EXECUTABLE = 1;
   const MODE_UNIX_SOCKET = 2;
+  const MODE_DAEMON_REST_CLIENT = 3;
 
   const OUTAGE_BLOCK_UNCHECKED = 0;
   const OUTAGE_ALLOW_UNCHECKED = 1;
diff --git a/src/Form/ClamAVConfigForm.php b/src/Form/ClamAVConfigForm.php
index d0e3eaa..4868bc2 100644
--- a/src/Form/ClamAVConfigForm.php
+++ b/src/Form/ClamAVConfigForm.php
@@ -52,7 +52,8 @@ class ClamAVConfigForm extends ConfigFormBase {
       '#options' => array(
         Config::MODE_EXECUTABLE  => $this->t('Executable'),
         Config::MODE_DAEMON      => $this->t('Daemon mode (over TCP/IP)'),
-        Config::MODE_UNIX_SOCKET => $this->t('Daemon mode (over Unix socket)')
+        Config::MODE_UNIX_SOCKET => $this->t('Daemon mode (over Unix socket)'),
+        Config::MODE_DAEMON_REST_CLIENT => $this->t('Daemon mode (over REST)')
       ),
       '#default_value' => $config->get('scan_mode'),
       '#description' => $this->t("Control how Drupal connects to ClamAV.<br />Daemon mode is recommended if the ClamAV service is capable of running as a daemon."),
@@ -150,6 +151,25 @@ class ClamAVConfigForm extends ConfigFormBase {
     );
 
 
+    // Configuration if ClamAV is set to Daemon mode.
+    $form['scan_mechanism_wrapper']['mode_daemon_rest_client'] = array(
+      '#type' => 'details',
+      '#title' => $this->t('Daemon mode configuration (over TCP/IP)'),
+      '#open' => TRUE,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="scan_mode"]' => array('value' => Config::MODE_DAEMON_REST_CLIENT),
+        ),
+      ),
+    );
+    $form['scan_mechanism_wrapper']['mode_daemon_rest_client']['endpoint'] = array(
+      '#type' => 'textfield',
+      '#title' => $this->t('REST endpoint'),
+      '#default_value' => $config->get('mode_daemon_rest_client.endpoint'),
+      '#maxlength' => 255,
+      '#description' => t('The endpoint for the ClamAV REST scanner.'),
+    );
+
     // Allow scanning according to scheme-wrapper.
     $form['schemes'] = array(
       '#type' => 'details',
@@ -180,7 +200,6 @@ class ClamAVConfigForm extends ConfigFormBase {
       );
     }
 
-
     $form['verbosity_wrapper'] = array(
       '#type' => 'details',
       '#title' => $this->t('Verbosity'),
@@ -206,7 +225,7 @@ class ClamAVConfigForm extends ConfigFormBase {
     // - the executable path exists
     // - the unix socket exists
     // - Drupal can connect to the hostname/port (warn but don't fail)
-    
+
   }
 
   /**
@@ -242,6 +261,8 @@ class ClamAVConfigForm extends ConfigFormBase {
 
       ->set('mode_daemon_unixsocket.unixsocket', $form_state->getValue('unixsocket'))
 
+      ->set('mode_daemon_rest_client.endpoint', $form_state->getValue('rest_endpoint'))
+
       ->save();
 
     parent::submitForm($form, $form_state);
diff --git a/src/Scanner.php b/src/Scanner.php
index 4dd1b7e..ce0788f 100644
--- a/src/Scanner.php
+++ b/src/Scanner.php
@@ -25,7 +25,6 @@ class Scanner {
   const FILE_IS_NOT_SCANNABLE = FALSE;
   const FILE_SCANNABLE_IGNORE = NULL;
 
-
   // Instance of a scanner class, implementing ScannerInterface.
   protected $scanner = NULL;
 
@@ -53,6 +52,10 @@ class Scanner {
       case Config::MODE_UNIX_SOCKET:
         $this->scanner = new Scanner\DaemonUnixSocket($this->config);
         break;
+
+      case Config::MODE_DAEMON_REST_CLIENT:
+        $this->scanner = new Scanner\DaemonRestClient($this->config);
+        break;
     }
   }
 
diff --git a/src/Scanner/DaemonRestClient.php b/src/Scanner/DaemonRestClient.php
new file mode 100644
index 0000000..56a45be
--- /dev/null
+++ b/src/Scanner/DaemonRestClient.php
@@ -0,0 +1,109 @@
+<?php
+
+namespace Drupal\clamav\Scanner;
+
+use Drupal\file\FileInterface;
+use Drupal\clamav\ScannerInterface;
+use Drupal\clamav\Scanner;
+use Drupal\clamav\Config;
+
+class DaemonRestClient implements ScannerInterface {
+  protected $file;
+  protected $endpoint;
+  protected $httpUser;
+  protected $httpPass;
+  protected $port;
+  protected $virusName = '';
+  protected $httpClient;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(Config $config) {
+    $this->endpoint = $config->get('mode_daemon_rest_client.endpoint');
+    $this->httpUser = getenv('CLAMAV_HTTP_USER');
+    $this->httpPass = getenv('CLAMAV_HTTP_PASS');
+
+    $this->httpClient = \Drupal::httpClient();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function scan(FileInterface $file) {
+
+    $result = Scanner::FILE_IS_UNCHECKED;
+
+    try {
+
+      $file_post = $this->httpClient->post($this->endpoint, [
+        'auth' => [$this->httpUser, $this->httpPass, 'Basic'],
+        'multipart' => [
+          [
+            'name' => 'file',
+            'contents' => fopen($file->getFileUri(), 'r')
+          ],
+          [
+            'name' => 'name',
+            'contents' => $file->getFilename()
+          ],
+        ]
+      ]);
+
+      $response = json_decode($file_post->getBody()->getContents());
+
+    } catch (\Exception $e) {
+
+      \Drupal::logger('Clam AV')->warning('Request for ClamAV service failed for file @file, error @error.', ['@file' => $file->getFilename(), '@error' => $e->getMessage()]);
+
+      return $result;
+
+    }
+
+    // Check for any viruses detected.
+    if (isset($response) && isset($response->file->status)) {
+      $result = $response->file->status == 'OK' ? Scanner::FILE_IS_CLEAN : Scanner::FILE_IS_INFECTED;
+
+      if (isset($response->file->foundViruses)) {
+        $this->virusName = current($response->file->foundViruses->stream);
+      }
+    }
+    else {
+      $result = Scanner::FILE_IS_UNCHECKED;
+    }
+
+    return $result;
+
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function virus_name() {
+    return $this->virusName;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function version() {
+
+    try {
+
+      $request = $this->httpClient->get($this->endpoint,
+        ['auth' => [$this->httpUser, $this->httpPass, 'Basic']]
+      );
+
+      if ($json = json_decode($request->getBody())) {
+        return isset($json->version) ? $json->version : 'unknown';
+      }
+
+    }
+    catch (\Exception $e) {
+      \Drupal::logger('Clam AV')->warning('Unable to connect to ClamAV REST Endpoint @endpoint. @error', ['@endpoint' => $this->endpoint, '@error' => $e->getMessage()]);
+      return 'No connection';
+    }
+
+  }
+
+}
