<?php

namespace Drupal\par_member_list_update_flows\Form;

use Drupal\Core\Form\FormStateInterface;
use Drupal\par_flows\Form\ParBaseForm;
use Drupal\par_member_list_update_flows\ParFlowAccessTrait;

/**
 * Enter the date the membership began.
 */
class ParStartDateForm extends ParBaseForm {

  use ParFlowAccessTrait;

  /**
   * Set the page title.
   */
  protected $pageTitle = "Enter the date the membership began";

  /**
   * {@inheritdoc}
   */
  public function loadData() {
    $par_data_coordinated_business = $this->getFlowDataHandler()->getParameter('par_data_coordinated_business');
    $par_data_organisation = $par_data_coordinated_business->getOrganisation(TRUE);
    $this->getFlowDataHandler()->setParameter('par_data_organisation', $par_data_organisation);
    parent::loadData();
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    $date = $this->getFlowDataHandler()->getTempDataValue('date_membership_began');

    $par_data_coordinated_business = $this->getFlowDataHandler()->getParameter('par_data_coordinated_business');
    $par_data_coordinated_business->set('date_membership_began', $date);

    // Check we are updating an existing organisation.
    if ($par_data_coordinated_business->save()) {
      $this->getFlowDataHandler()->deleteStore();
    }
    else {
      $message = $this->t('Date %date could not be saved for %form_id');
      $replacements = [
        '%date' => print_r($date, 1),
        '%form_id' => $this->getFormId(),
      ];
      $this->getLogger($this->getLoggerChannel())
        ->error($message, $replacements);
    }

    parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
  }

}
