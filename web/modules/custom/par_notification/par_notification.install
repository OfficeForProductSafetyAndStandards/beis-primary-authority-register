<?php
/**
 * @file
 * Installation hooks for par_data module.
 */

use Drupal\message\MessageInterface;
use Drupal\par_data\ParDataManagerInterface;
use Drupal\par_notification\ParNotificationException;
use Drupal\Core\Field\FieldStorageDefinitionInterface;


/**
 * Install the new message entities base fields.
 */
function par_notification_update_9001() {
  // Adding new field definitions to an entity.
  // @see https://www.drupal.org/node/3034742#comment-14054069
  $module_name = 'message';
  $entity_type = 'message';
  $fields = [
    'field_target_authority',
    'field_target_organisation',
  ];

  \Drupal::entityTypeManager()->clearCachedDefinitions();

  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions($entity_type, $entity_type);
  foreach ($fields as $field_name) {
    if (!empty($field_definitions[$field_name]) && $field_definitions[$field_name] instanceof FieldStorageDefinitionInterface) {
      $entity_definition_update_manager
        ->installFieldStorageDefinition(
          $field_name,
          $entity_type,
          $module_name,
          $field_definitions[$field_name]);
    }
  }
}

/**
 * Find all of the subscribed entities for each message.
 */
function par_notification_update_undefined(&$sandbox) {
  $batch_size = 100;

  // Initialize some variables during the first pass through.
  if (!isset($sandbox['total'])) {
    // Build the message query.
    $total_query = \Drupal::entityTypeManager()
      ->getStorage('message')
      ->getQuery('par_data_messages');
    $total_results = array_unique($total_query->execute());

    // Set default values.
    $sandbox['messages'] = array_chunk($total_results, $batch_size, TRUE);
    $sandbox['total'] = count($total_results);
    $sandbox['events'] = [];
    $sandbox['current'] = 0;
    $sandbox['updated'] = 0;
    $sandbox['deleted'] = 0;
    $sandbox['expired'] = 0;
  }

  $chunk = $sandbox['messages'][$sandbox['current']];
  foreach ($chunk as $mid) {
    $message = \Drupal::entityTypeManager()
      ->getStorage('message')
      ->load($mid);
    if (!$message instanceof MessageInterface) {
      continue;
    }

    // Get the subscription manager.
    $subscription_manager = \Drupal::service('plugin.manager.par_subscription_manager');
    // Get the message handler.
    $message_handler = \Drupal::service('par_notification.message_handler');
    // Get the message expiry manager.
    $message_expiry_manager = \Drupal::service('message_expire.manager');

    try {
      $primary_data = $message_handler->getPrimaryData($message);
    }
    catch (ParNotificationException $e) {
      // Delete messages which are missing primary data.
      $message->delete();
      $sandbox['deleted']++;
      continue;
    }

    // Identify whether any of the primary data has already been accounted for.
    $events = &$sandbox['events'];
    $unique_data = array_filter($primary_data, function($data) use ($message, $events) {
      $event_key = implode(':', [
        $message->getTemplate()->id(),
        $data?->id() ?? $message->id(),
      ]);
      return !isset($sandbox['events'][$event_key]);
    });

    // If there is no unique data this message can be discarded.
    if (empty($unique_data)) {
      $message_expiry_manager->expire([$message]);
      $sandbox['expired']++;
      continue;
    }

    // Add the message to the event log.
    foreach ($unique_data as $data) {
      $event_key = implode(':', [
        $message->getTemplate()->id(),
        $data?->id() ?? $message->id(),
      ]);
      $events[$event_key] = $mid;
    }

    // Add any recipients to the 'field_to'.
    if ($recipients = $subscription_manager->getRecipients($message)) {
      $message->set('field_to', $recipients);
    }

    // Get the related entities.
    $related_entities = $subscription_manager->getSubscribedEntities($message);
    $authorities = array_filter($related_entities, function ($related_entity) {
      return ('par_data_authority' === $related_entity->getEntityTypeId());
    });
    $organisations = array_filter($related_entities, function ($related_entity) {
      return ('par_data_organisation' === $related_entity->getEntityTypeId());
    });

    // Add the subscribed entities.
    if (!empty($authorities) && $message->hasField('field_target_authority')) {
      $message->set('field_target_authority', $authorities);
    }
    if (!empty($organisations) && $message->hasField('field_target_organisation')) {
      $message->set('field_target_organisation', $organisations);
    }

    if (!empty($authorities) || !empty($organisations) || !empty($unique_data)) {
        // Save the message.
        $message->save();
        $sandbox['updated']++;
    }
  }

  $sandbox['current']++;
  $messages_updated = ($batch_size * $sandbox['current']);
  $message = "$messages_updated messages processed with {$sandbox['updated']} messages updated, {$sandbox['deleted']} removed and {$sandbox['expired']} expired. Batch {$sandbox['current']} complete.";

  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($messages_updated / $sandbox['total']);
  }

  return t($message);
}
