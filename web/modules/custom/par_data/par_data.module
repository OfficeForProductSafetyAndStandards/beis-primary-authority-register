<?php

/**
 * @file
 * Contains par_data.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\par_data\Entity\ParDataPartnership;
use Drupal\par_data\Entity\ParDataPersonType;
use Drupal\views\ViewExecutable;
use Drupal\par_data\Event\ParDataEvent;
use Drupal\par_data\Entity\ParDataEntityInterface;

/**
 * Implements hook_help().
 */
function par_data_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the par_data module.
    case 'help.page.par_data':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The data model for PAR.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function par_data_theme() {
  return [
    'par_data' => [
      'render element' => 'children',
    ],
    'par_data_entity_list' => [
      'render element' => 'types',
      'variables' => [
        'types' => NULL,
      ],
      'template' => 'par-data-entity-list',
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 *
 * Notifies other par modules that a par entity has been created.
 *
 * We need to use hooks to capture these events because
 * at this stage the entity has the original property,
 * containing the entity before it was operated on.
 */
function par_data_entity_insert(EntityInterface $entity) {
  if ($entity instanceof ParDataEntityInterface) {
    $event = new ParDataEvent($entity);
    $dispatcher = \Drupal::service('event_dispatcher');
    $dispatcher->dispatch(ParDataEvent::CREATE, $event);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Notifies other par modules that a par entity has been updated.
 *
 * We need to use hooks to capture these events because
 * at this stage the entity has the original property,
 * containing the entity before it was operated on.
 */
function par_data_entity_update(EntityInterface $entity) {
  if ($entity instanceof ParDataEntityInterface) {
    $event = new ParDataEvent($entity);
    $dispatcher = \Drupal::service('event_dispatcher');
    $dispatcher->dispatch(ParDataEvent::UPDATE, $event);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Notifies other par modules that a par entity has been deleted.
 *
 * We need to use hooks to capture these events because
 * at this stage the entity has the original property,
 * containing the entity before it was operated on.
 */
function par_data_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ParDataEntityInterface) {
    $event = new ParDataEvent($entity);
    $dispatcher = \Drupal::service('event_dispatcher');
    $dispatcher->dispatch(ParDataEvent::DELETE, $event);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Adds the par_required constraint to all bundle fields.
 *
 * The present use case requires all bundle fields, currently
 * only entity reference fields, to be required if validated.
 */
function par_data_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  $par_data_manager = \Drupal::service('par_data.manager');
  if ($par_data_manager->getParEntityType($entity_type->id())) {
    foreach ($fields as $name => $field) {
      // @TODO Implement validation of reference fields.
      // $fields[$name]->addConstraint('par_required', []);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * @TODO There is a known outstanding issue with postgres compatability that requires work.
 * @see Patch #53 only covers entity queries https://www.drupal.org/node/2464481#comment-10076086
 *
 * This hook adds case insensitivity to certain views filter fields.
 * Requires re-working into a more generic solution that covers
 * all non-entity api queries.
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $query
 */
function par_data_views_query_alter(ViewExecutable $view, $query) {

  // PostgreSQL case insensitive query alter.
  foreach ($query->where as $group_key => $group) {
    foreach ($group['conditions'] as $key => $condition) {

      // Only apply to combined fields, Views stamps in queries are useful!
      if (preg_match('/:views_combine/', $condition['field'])) {
        // ILIKE is proprietary to PostgreSQL.
        $query->where[$group_key]['conditions'][$key]['field'] = str_replace('LIKE', 'ILIKE', $condition['field']);
      }

    }
  }

}

/**
 * Implements hook_entity_extra_field_info().
 */
function par_data_entity_extra_field_info() {
  $extra = [];

  $extra_field_info_defaults = [
    'visible' => TRUE,
  ];

  foreach (ParDataPersonType::loadMultiple() as $bundle) {
    $extra['par_data_person'][$bundle->Id()]['display']['full_name_pseudo_field'] = [
      'label' => t('Full Name'),
      'weight' => 0,
    ] + $extra_field_info_defaults;

    $extra['par_data_person'][$bundle->Id()]['display']['work_phone_pseudo_field'] = [
      'label' => t('Work phone number displaying contact preferences'),
      'weight' => 1,
    ] + $extra_field_info_defaults;

    $extra['par_data_person'][$bundle->Id()]['display']['mobile_phone_pseudo_field'] = [
      'label' => t('Mobile phone number displaying contact preferences'),
      'weight' => 2,
    ] + $extra_field_info_defaults;

    $extra['par_data_person'][$bundle->Id()]['display']['email_pseudo_field'] = [
      'label' => t('E-mail address displaying contact preferences'),
      'weight' => 3,
    ] + $extra_field_info_defaults;
  }

  return $extra;
}


/**
 * Implements hook_entity_view().
 */
function par_data_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  if ($entity->getEntityTypeId() === 'par_data_person') {
    $field_defaults = [
      '#type' => 'markup',
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    ];

    if ($display->getComponent('full_name_pseudo_field')) {
      $build['full_name_pseudo_field'] = [
        '#plain_text' => $entity->getFullName(),
      ] + $field_defaults;
    }

    if ($display->getComponent('work_phone_pseudo_field')) {
      $build['work_phone_pseudo_field'] = [
        '#plain_text' => $entity->getWorkPhone(),
      ] + $field_defaults;
    }

    if ($display->getComponent('mobile_phone_pseudo_field')) {
      $build['mobile_phone_pseudo_field'] = [
        '#plain_text' => $entity->getMobilePhone(),
      ] + $field_defaults;
    }

    if ($display->getComponent('email_pseudo_field')) {
      $build['email_pseudo_field'] = [
        '#markup' => $entity->getEmailLink(),
      ] + $field_defaults;
    }
  }

}

/**
 * Migrate legal entities from organisation to partnership.
 * @todo remove when not needed anymore.
 */
function par_data_update_legal_entities() {
  // Set unlimited memory limit and PHP execution time.
  ini_set("memory_limit", -1);
  ini_set("max_execution_time", -1);

  $total_time = 0;

  foreach (ParDataPartnership::loadMultiple() as $partnership) {

    // Check if partnership already has legal entity references.
    if (!empty($partnership->retrieveEntityIds('field_legal_entity'))) {
      echo "Skipped partnership {$partnership->id()} as legal entities exist.\n";
      continue;
    }

    $time_start = microtime(true);

    // Get partnership organisation entity.
    $par_data_organisation = $partnership->getOrganisation(TRUE);

    // Get all legal entities on organisation.
    $legal_entities = $par_data_organisation
      ->retrieveEntityIds('field_legal_entity');


    // Check if organisation has legal entity refs.
    if (empty($legal_entities)) {
      echo "Skipped partnership {$partnership->id()} as no legal entities.\n";
      continue;
    }

    $legal_entities_as_list = implode(', ', $legal_entities);

    echo "Migrating legal entities {$legal_entities_as_list} to {$partnership->id()}";

    // Save legal entities to partnership legal entity reference field.
    $partnership->set('field_legal_entity', $legal_entities);

    // Commit changes to partnership.
    if ($partnership->save()) {
      $execution_time = round((microtime(true) - $time_start), "2");

      echo " [done] ({$execution_time}s)\n";
    }
    else {
      echo " [failed] {$partnership->id()}\n";
    }

  }
}
