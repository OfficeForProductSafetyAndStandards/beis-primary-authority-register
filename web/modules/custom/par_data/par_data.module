<?php

/**
 * @file
 * Contains par_data.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function par_data_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the par_data module.
    case 'help.page.par_data':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The data model for PAR.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function par_data_theme() {
  return [
    'par_data' => [
      'render element' => 'children',
    ],
    'par_data_entity_list' => [
      'render element' => 'types',
      'variables' => [
        'types' => NULL,
      ],
      'template' => 'par-data-entity-list',
    ],
  ];
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Adds the par_required constraint to all bundle fields.
 *
 * The present use case requires all bundle fields, currently
 * only entity reference fields, to be required if validated.
 */
function par_data_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  $par_data_manager = \Drupal::service('par_data.manager');
  if ($par_data_manager->getParEntityType($entity_type->id())) {
    foreach ($fields as $name => $field) {
      $fields[$name]->addConstraint('par_required', []);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * @TODO There is a known outstanding issue with postgres compatability that requires work.
 * @see Patch #53 only covers entity queries https://www.drupal.org/node/2464481#comment-10076086
 *
 * This hook adds case insensitivity to certain views filter fields.
 * Requires re-working into a more generic solution that covers
 * all non-entity api queries.
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $query
 */
function par_data_views_query_alter(ViewExecutable $view, $query) {

  // PostgreSQL case insensitive query alter.
  foreach ($query->where as $group_key => $group) {
    foreach ($group['conditions'] as $key => $condition) {

      // Only apply to combined fields, Views stamps in queries are useful!
      if (preg_match('/:views_combine/', $condition['field'])) {
        // ILIKE is proprietary to PostgreSQL.
        $query->where[$group_key]['conditions'][$key]['field'] = str_replace('LIKE', 'ILIKE', $condition['field']);
      }

    }
  }

}
