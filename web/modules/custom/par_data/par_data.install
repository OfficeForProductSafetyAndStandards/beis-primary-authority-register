<?php
/**
 * @file
 * Installation hooks for par_data module.
 */

use Drupal\par_data\Entity\ParDataEnforcementNotice;
use Drupal\par_data\Entity\ParDataPartnership;
use Drupal\par_data\Entity\ParDataEntity;

/**
 * Implements hook_install().
 */
function par_data_install() {
  // Ensure the translation fields are created in the database.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update the PAR entities.
 */
function par_data_update_8001() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update the PAR entities again.
 */
function par_data_update_8002() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Final update before migration.
 */
function par_data_update_8003() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to physical model v4.
 */
function par_data_update_8004() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to missing fields from physical model v4.
 */
function par_data_update_8005() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update fields based on enforcement migration.
 */
function par_data_update_8006() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Move all organisations to the new organisation bundle.
 */
function par_data_update_8007() {
  $db = \Drupal::database();

  // Change the bundle type.
  foreach (\Drupal\par_data\Entity\ParDataOrganisation::loadMultiple() as $entity) {
    if ($entity->hasField('field_coordinator_number')) {
      $entity->set('coordinator_number', $entity->get('field_coordinator_number')->getString());
    }
    $entity->type = 'organisation';
    $entity->save();
  }

  // Change all the entity field tables because Entity::save() doesn't do this.
  $entityManager = \Drupal::service('entity_field.manager');
  foreach ($entityManager->getFieldDefinitions('par_data_organisation', 'organisation') as $field) {
    $storage = $field->getFieldStorageDefinition();
    if ($storage->isBaseField() === TRUE) {
      continue;
    }

    $entity_type = \Drupal::service('par_data.manager')->getParEntityType('par_data_organisation');
    $table_mapping = new \Drupal\Core\Entity\Sql\DefaultTableMapping($entity_type, [$storage]);
    $table_names = $table_mapping->getDedicatedTableNames($storage);

    foreach ($table_names as $table) {
      $query = $db->update($table)
        ->fields(['bundle' => 'organisation'])
        ->execute();
    }
  };
}

/**
 * Resave all users.
 */
function par_data_update_8008() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Remove the old deprecated roles.
    if ($entity->hasRole('par_coordinator')) {
      $entity->removeRole('par_coordinator');
    }
    if ($entity->hasRole('par_business')) {
      $entity->removeRole('par_business');
    }
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Adding action state fields to all entities.
 */
function par_data_update_8009() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Re-running conversion of business bundle to organisation bundle because of new business entries.
 */
function par_data_update_8010() {
  $db = \Drupal::database();

  // Change the bundle type.
  foreach (entity_load_multiple_by_properties('par_data_organisation', ['type' => 'business']) as $entity) {
    if ($entity->hasField('field_coordinator_number')) {
      $entity->set('coordinator_number', $entity->get('field_coordinator_number')->getString());
    }
    $entity->type = 'organisation';
    $entity->save();
  }

  // Change all the entity field tables because Entity::save() doesn't do this.
  $entityManager = \Drupal::service('entity_field.manager');
  foreach ($entityManager->getFieldDefinitions('par_data_organisation', 'organisation') as $field) {
    $storage = $field->getFieldStorageDefinition();
    if ($storage->isBaseField() === TRUE) {
      continue;
    }

    $entity_type = \Drupal::service('par_data.manager')->getParEntityType('par_data_organisation');
    $table_mapping = new \Drupal\Core\Entity\Sql\DefaultTableMapping($entity_type, [$storage]);
    $table_names = $table_mapping->getDedicatedTableNames($storage);

    foreach ($table_names as $table) {
      $db->update($table)
        ->fields(['bundle' => 'organisation'])
        ->execute();
    }
  };
}

/**
 * Resave all users.
 */
function par_data_update_8011() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Remove traces of deleted modules.
 */
function par_data_update_8012() {
  // Delete the following modules.
  $db = \Drupal::database();
  $db->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', ['par_flow_transition_business', 'par_flow_transition_partnership_details', 'par_flow_transition_coordinator', 'par_flow_helpdesk'], 'IN')
    ->execute();
}

/**
 * Resave all users.
 */
function par_data_update_8013() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Remove traces of deleted modules.
 */
function par_data_update_8014() {
  // Delete the following modules.
  $db = \Drupal::database();
  $db->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', ['par_migration', 'par_migration_scripts', 'migrate_tools', 'migrate_source_csv', 'migrate_plus', 'sqlsrv'], 'IN')
    ->execute();
}

/**
 * Update to physical model v11.
 */
function par_data_update_8015() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Resave all enforcement notices to populate the primary authorities field.
 */
function par_data_update_8016() {
  foreach (ParDataEnforcementNotice::loadMultiple() as $entity) {
    if (!$entity->getPartnership()) {
      continue;
    }

    $entity->set('field_primary_authority', $entity->getPrimaryAuthority());
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Populate revoked boolean with default value.
 */
function par_data_update_8017() {
  $db = \Drupal::database();
  $entity_types = \Drupal::service('par_data.manager')->getParEntityTypes();

  foreach($entity_types as $entity_type) {
    $table_names = [$entity_type->getDataTable(), $entity_type->getRevisionDataTable()];

    foreach ($table_names as $table) {
      $query = $db->update($table)
        ->fields(['revoked' => 0])
        ->isNull('revoked')
        ->execute();

      $query = $db->update($table)
        ->fields(['archived' => 0])
        ->isNull('archived')
        ->execute();

      $query = $db->update($table)
        ->fields(['deleted' => 0])
        ->isNull('deleted')
        ->execute();
    }
  }
}

/**
 * Apply updates for country code field in ParDataPremises.
 */
function par_data_update_8018() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Apply updates for country code field in ParDataPremises.
 */
function par_data_update_8019() {
  $db = \Drupal::database();

  // The watchdog table exists but the module is uninstalled.
  $tables_to_remove = ['watchdog'];
  foreach ($tables_to_remove as $table) {
    $exists = $db->schema()->tableExists($table);
    if ($exists) {
      $db->schema()->dropTable($table);
    }
  }

  // Remove deleted fields.
  field_purge_batch(1000);
}

/**
 * Migrate legal entities to partnerships.
 */
function par_data_update_8020() {
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('par_scheduled_actions');

  $par_data_manager = \Drupal::service('par_data.manager');

  $partnerships = $par_data_manager->getEntitiesByProperty('par_data_partnership', 'deleted', 0);
  foreach ($partnerships as $partnership) {
    $item = [
      'entity' => $partnership,
      'action' => 'par_migrate_legal_entities',
    ];
    $queue->createItem($item);
  }
}

/**
 * Update fields for daterange on coordinated businesses.
 */
function par_data_update_8021() {
  // Run the entity updates first so that we have access to our new fields.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
 
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('par_scheduled_actions');

  $par_data_manager = \Drupal::service('par_data.manager');

  $coordinated_businesses = $par_data_manager->getEntitiesByType('par_data_coordinated_business');

  foreach ($coordinated_businesses as $entity) {
    $item = [
      'entity' => $entity,
      'action' => 'par_migrate_coordinated_partnership_date_field',
    ];
    $queue->createItem($item);
  }
}

/**
 * Migrate any legal entities that weren't caught by the previous update 8020.
 */
function par_data_update_8022() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $partnerships = $par_data_manager->getEntitiesByProperty('par_data_partnership', 'deleted', 0);
  foreach ($partnerships as $partnership) {
    $partnership_legal_entities = $partnership->getLegalEntity();
    $organisation = $partnership->getOrganisation(TRUE);
    if ($organisation) {
      $organisation_legal_entities = $organisation->getLegalEntity();
    }

    if (isset($organisation_legal_entities) && $organisation_legal_entities !== $partnership_legal_entities
      && count($partnership_legal_entities) === 0) {
      $partnership->set('field_legal_entity', $organisation_legal_entities);
      $partnership->save();
    }
  }
}

/**
 * There are a whole bunch of incorrect people entities.
 */
function par_data_update_8023() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $people = $par_data_manager->getEntitiesByProperty('par_data_person', 'type', 'business');
  foreach ($people as $person) {
    $person->destroy();
  }
}

/**
 * Uninstall par_enorcement_flows module (now removed from filesystem).
 */
function par_data_update_8024() {
  $query = \Drupal::database()->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', 'par_enforcement_flows')
    ->execute();
}

/**
 * Stoopid invite module didn't update it's entities properly.
 */
function par_data_update_8025() {
  // Ensure the invite.created field is created in the database.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * There is a corrupt deleted field that needs to be removed.
 */
function par_data_update_8026() {
  // We need to trash the deleted field_uprn because it is causing issues.
  $deleted_field_definitions = \Drupal::state()->get('field.field.deleted', []);

  foreach($deleted_field_definitions as $definition) {
    if ($definition->getName() === 'field_uprn') {
      field_purge_field($definition);
    }
  }

  // Then run purge to make sure all other fields are gone.
  field_purge_batch(500);
}

/**
 * Correct missing addresses.
 */
function par_data_update_8027() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $allowed = [
    'GB-ENG' => 'England',
    'GB-SCT' => 'Scotland',
    'GB-WLS' => 'Wales',
    'GB-NIR' => 'Northern Ireland',
  ];

  $types = ['par_data_premises', 'par_data_organisation'];

  // Premises query.
  $query = $par_data_manager->getEntityQuery('par_data_premises');
  $premises_ids = $query->condition('nation', array_keys($allowed), 'NOT IN')
    ->execute();

  // Organisation query.
  $query = $par_data_manager->getEntityQuery('par_data_organisation');
  $group = $query
    ->orConditionGroup()
    ->condition('nation', array_keys($allowed), 'NOT IN')
    ->condition('nation', NULL, 'IS NULL');
  $organisation_ids = $query->condition($group)
    ->execute();


  $premises_entities = \Drupal::entityTypeManager()->getStorage('par_data_premises')->loadMultiple(array_unique($premises_ids));
  $organisation_entities = \Drupal::entityTypeManager()->getStorage('par_data_organisation')->loadMultiple(array_unique($organisation_ids));

  foreach ($premises_entities as $entity) {
    // See if we can convert the entity.
    $nation = $entity->get('nation')->getString();
    if (!empty($nation) && $key = array_search(trim($nation), $allowed)) {
      $entity->setNation($key, TRUE);
      $entity->save();
    }
  }

  foreach ($organisation_entities as $entity) {
    // See if we can convert the entity.
    $nation = $entity->get('nation')->getString();
    if (!empty($nation) && $key = array_search(trim($nation), $allowed)) {
      $entity->setNation($key, TRUE);
      $entity->save();
    }

    if ($entity->get('nation')->isEmpty()) {
      $premises = $entity->getPremises(TRUE);
      if ($premises && !$premises->get('nation')->isEmpty()) {
        $entity->setNation($premises->get('nation')->getString(), TRUE);
        $entity->save();
      }
    }
  }
}

/**
 * Tidy up databases.
 */
function par_data_update_8028() {
  // Remove tables for test modules.
  $db = \Drupal::database();
  $tables_to_remove = ['watchdog', 'maillog', 'webprofiler'];
  foreach ($tables_to_remove as $table) {
    $exists = $db->schema()->tableExists($table);
    if ($exists) {
      $db->schema()->dropTable($table);
    }
  }

  // Ensure all file fields are up to date.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to physical model includes new message entities.
 */
function par_data_update_8029() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Remove Enforcement Notices that were created in duplicate and that have no actions.
 */
function par_data_update_8030() {
  $par_data_manager = \Drupal::service('par_data.manager');

  // Retrieve all ENs with no actions.
  $conditions = [
    [
      'AND' => [
        ['field_enforcement_action', '', 'IS NULL'],
      ]
    ],
  ];
  $par_data_enforcement_notices = $par_data_manager->getEntitiesByQuery('par_data_enforcement_notice', $conditions);

  foreach ($par_data_enforcement_notices as $par_data_enforcement_notice) {
    if ($par_data_enforcement_notice->getEnforcementActions()) {
      continue;
    }
    // Permanently remove this entity.
    $par_data_enforcement_notice->destroy();
  }

  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Sync the old transform buckets to the new beis owned buckets.
 */
function par_data_update_8031() {
  // For Private files.
  if ($new = getenv('S3_BUCKET_PRIVATE') && $old = getenv('TRANSFORM_BUCKET_PRIVATE')) {
    $exec = drush_shell_exec("aws s3 sync {$old} {$new}");
    drush_print(drush_shell_exec_output());
  }
  // For Public files.
  if ($new = getenv('S3_BUCKET_PUBLIC') && $old = getenv('TRANSFORM_BUCKET_PUBLIC')) {
    $exec = drush_shell_exec("aws s3 sync {$old} {$new}");
    drush_print(drush_shell_exec_output());
  }
}
