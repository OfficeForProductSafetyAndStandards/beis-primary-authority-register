<?php
/**
 * @file
 * Installation hooks for par_data module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\par_data\Entity\ParDataEnforcementNotice;
use Drupal\par_data\Entity\ParDataPartnership;
use Drupal\par_data\Entity\ParDataEntity;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\par_data\Entity\ParDataPersonInterface;

/**
 * Implements hook_install().
 */
function par_data_install() {
  // Ensure the translation fields are created in the database.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

function par_data_update_dependencies() {
  // The system module adds fields to an entity which no longer exists.
  $dependencies['system'][8702] = [
    'par_data' => 8033,
  ];

  return $dependencies;
}

/**
 * Update the PAR entities.
 */
function par_data_update_8001() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update the PAR entities again.
 */
function par_data_update_8002() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Final update before migration.
 */
function par_data_update_8003() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to physical model v4.
 */
function par_data_update_8004() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to missing fields from physical model v4.
 */
function par_data_update_8005() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update fields based on enforcement migration.
 */
function par_data_update_8006() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Move all organisations to the new organisation bundle.
 */
function par_data_update_8007() {
  $db = \Drupal::database();

  // Change the bundle type.
  foreach (\Drupal\par_data\Entity\ParDataOrganisation::loadMultiple() as $entity) {
    if ($entity->hasField('field_coordinator_number')) {
      $entity->set('coordinator_number', $entity->get('field_coordinator_number')->getString());
    }
    $entity->type = 'organisation';
    $entity->save();
  }

  // Change all the entity field tables because Entity::save() doesn't do this.
  $entityManager = \Drupal::service('entity_field.manager');
  foreach ($entityManager->getFieldDefinitions('par_data_organisation', 'organisation') as $field) {
    $storage = $field->getFieldStorageDefinition();
    if ($storage->isBaseField() === TRUE) {
      continue;
    }

    $entity_type = \Drupal::service('par_data.manager')->getParEntityType('par_data_organisation');
    $table_mapping = new \Drupal\Core\Entity\Sql\DefaultTableMapping($entity_type, [$storage]);
    $table_names = $table_mapping->getDedicatedTableNames($storage);

    foreach ($table_names as $table) {
      $query = $db->update($table)
        ->fields(['bundle' => 'organisation'])
        ->execute();
    }
  };
}

/**
 * Resave all users.
 */
function par_data_update_8008() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Remove the old deprecated roles.
    if ($entity->hasRole('par_coordinator')) {
      $entity->removeRole('par_coordinator');
    }
    if ($entity->hasRole('par_business')) {
      $entity->removeRole('par_business');
    }
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Adding action state fields to all entities.
 */
function par_data_update_8009() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Re-running conversion of business bundle to organisation bundle because of new business entries.
 */
function par_data_update_8010() {
  $db = \Drupal::database();

  // Change the bundle type.
  $entities = [];
  try {
    $entities = \Drupal::entityTypeManager()
      ->getStorage('par_data_organisation')
      ->loadByProperties(['type' => 'business']);
  } catch (\Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException $e) {
  } catch (\Drupal\Component\Plugin\Exception\PluginNotFoundException $e) {
  }

  foreach ($entities as $entity) {
    if ($entity->hasField('field_coordinator_number')) {
      $entity->set('coordinator_number', $entity->get('field_coordinator_number')->getString());
    }
    $entity->type = 'organisation';
    $entity->save();
  }

  // Change all the entity field tables because Entity::save() doesn't do this.
  $entityManager = \Drupal::service('entity_field.manager');
  foreach ($entityManager->getFieldDefinitions('par_data_organisation', 'organisation') as $field) {
    $storage = $field->getFieldStorageDefinition();
    if ($storage->isBaseField() === TRUE) {
      continue;
    }

    $entity_type = \Drupal::service('par_data.manager')->getParEntityType('par_data_organisation');
    $table_mapping = new \Drupal\Core\Entity\Sql\DefaultTableMapping($entity_type, [$storage]);
    $table_names = $table_mapping->getDedicatedTableNames($storage);

    foreach ($table_names as $table) {
      $db->update($table)
        ->fields(['bundle' => 'organisation'])
        ->execute();
    }
  };
}

/**
 * Resave all users.
 */
function par_data_update_8011() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Remove traces of deleted modules.
 */
function par_data_update_8012() {
  // Delete the following modules.
  $db = \Drupal::database();
  $db->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', ['par_flow_transition_business', 'par_flow_transition_partnership_details', 'par_flow_transition_coordinator', 'par_flow_helpdesk'], 'IN')
    ->execute();
}

/**
 * Resave all users.
 */
function par_data_update_8013() {
  // Change the bundle type.
  foreach (\Drupal\user\Entity\User::loadMultiple() as $entity) {
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Remove traces of deleted modules.
 */
function par_data_update_8014() {
  // Delete the following modules.
  $db = \Drupal::database();
  $db->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', ['par_migration', 'par_migration_scripts', 'migrate_tools', 'migrate_source_csv', 'migrate_plus', 'sqlsrv'], 'IN')
    ->execute();
}

/**
 * Update to physical model v11.
 */
function par_data_update_8015() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Resave all enforcement notices to populate the primary authorities field.
 */
function par_data_update_8016() {
  foreach (ParDataEnforcementNotice::loadMultiple() as $entity) {
    if (!$entity->getPartnership()) {
      continue;
    }

    $entity->set('field_primary_authority', $entity->getPrimaryAuthority());
    // Re-save the entity.
    $entity->save();
  }
}

/**
 * Populate revoked boolean with default value.
 */
function par_data_update_8017() {
  $db = \Drupal::database();
  $entity_types = \Drupal::service('par_data.manager')->getParEntityTypes();

  foreach($entity_types as $entity_type) {
    $table_names = [$entity_type->getDataTable(), $entity_type->getRevisionDataTable()];

    foreach ($table_names as $table) {
      $query = $db->update($table)
        ->fields(['revoked' => 0])
        ->isNull('revoked')
        ->execute();

      $query = $db->update($table)
        ->fields(['archived' => 0])
        ->isNull('archived')
        ->execute();

      $query = $db->update($table)
        ->fields(['deleted' => 0])
        ->isNull('deleted')
        ->execute();
    }
  }
}

/**
 * Apply updates for country code field in ParDataPremises.
 */
function par_data_update_8018() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Apply updates for country code field in ParDataPremises.
 */
function par_data_update_8019() {
  $db = \Drupal::database();

  // The watchdog table exists but the module is uninstalled.
  $tables_to_remove = ['watchdog'];
  foreach ($tables_to_remove as $table) {
    $exists = $db->schema()->tableExists($table);
    if ($exists) {
      $db->schema()->dropTable($table);
    }
  }

  // Remove deleted fields.
  field_purge_batch(1000);
}

/**
 * Migrate legal entities to partnerships.
 */
function par_data_update_8020() {
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('par_scheduled_actions');

  $par_data_manager = \Drupal::service('par_data.manager');

  $partnerships = $par_data_manager->getEntitiesByProperty('par_data_partnership', 'deleted', 0);
  foreach ($partnerships as $partnership) {
    $item = [
      'entity' => $partnership,
      'action' => 'par_migrate_legal_entities',
    ];
    $queue->createItem($item);
  }
}

/**
 * Update fields for daterange on coordinated businesses.
 */
function par_data_update_8021() {
  // Run the entity updates first so that we have access to our new fields.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('par_scheduled_actions');

  $par_data_manager = \Drupal::service('par_data.manager');

  $coordinated_businesses = $par_data_manager->getEntitiesByType('par_data_coordinated_business');

  foreach ($coordinated_businesses as $entity) {
    $item = [
      'entity' => $entity,
      'action' => 'par_migrate_coordinated_partnership_date_field',
    ];
    $queue->createItem($item);
  }
}

/**
 * Migrate any legal entities that weren't caught by the previous update 8020.
 */
function par_data_update_8022() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $partnerships = $par_data_manager->getEntitiesByProperty('par_data_partnership', 'deleted', 0);
  foreach ($partnerships as $partnership) {
    $partnership_legal_entities = $partnership->getLegalEntity();
    $organisation = $partnership->getOrganisation(TRUE);
    if ($organisation) {
      $organisation_legal_entities = $organisation->getLegalEntity();
    }

    if (isset($organisation_legal_entities) && $organisation_legal_entities !== $partnership_legal_entities
      && count($partnership_legal_entities) === 0) {
      $partnership->set('field_legal_entity', $organisation_legal_entities);
      $partnership->save();
    }
  }
}

/**
 * There are a whole bunch of incorrect people entities.
 */
function par_data_update_8023() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $people = $par_data_manager->getEntitiesByProperty('par_data_person', 'type', 'business');
  foreach ($people as $person) {
    $person->destroy();
  }
}

/**
 * Uninstall par_enorcement_flows module (now removed from filesystem).
 */
function par_data_update_8024() {
  $query = \Drupal::database()->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', 'par_enforcement_flows')
    ->execute();
}

/**
 * Stoopid invite module didn't update it's entities properly.
 */
function par_data_update_8025() {
  // Ensure the invite.created field is created in the database.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * There is a corrupt deleted field that needs to be removed.
 */
function par_data_update_8026() {
  // We need to trash the deleted field_uprn because it is causing issues.
  $deleted_field_definitions = \Drupal::state()->get('field.field.deleted', []);

  foreach($deleted_field_definitions as $definition) {
    if ($definition->getName() === 'field_uprn') {
      field_purge_field($definition);
    }
  }

  // Then run purge to make sure all other fields are gone.
  field_purge_batch(500);
}

/**
 * Correct missing addresses.
 */
function par_data_update_8027() {
  $par_data_manager = \Drupal::service('par_data.manager');

  $allowed = [
    'GB-ENG' => 'England',
    'GB-SCT' => 'Scotland',
    'GB-WLS' => 'Wales',
    'GB-NIR' => 'Northern Ireland',
  ];

  $types = ['par_data_premises', 'par_data_organisation'];

  // Premises query.
  $query = $par_data_manager->getEntityQuery('par_data_premises');
  $premises_ids = $query->condition('nation', array_keys($allowed), 'NOT IN')
    ->execute();

  // Organisation query.
  $query = $par_data_manager->getEntityQuery('par_data_organisation');
  $group = $query
    ->orConditionGroup()
    ->condition('nation', array_keys($allowed), 'NOT IN')
    ->condition('nation', NULL, 'IS NULL');
  $organisation_ids = $query->condition($group)
    ->execute();


  $premises_entities = \Drupal::entityTypeManager()->getStorage('par_data_premises')->loadMultiple(array_unique($premises_ids));
  $organisation_entities = \Drupal::entityTypeManager()->getStorage('par_data_organisation')->loadMultiple(array_unique($organisation_ids));

  foreach ($premises_entities as $entity) {
    // See if we can convert the entity.
    $nation = $entity->get('nation')->getString();
    if (!empty($nation) && $key = array_search(trim($nation), $allowed)) {
      $entity->setNation($key, TRUE);
      $entity->save();
    }
  }

  foreach ($organisation_entities as $entity) {
    // See if we can convert the entity.
    $nation = $entity->get('nation')->getString();
    if (!empty($nation) && $key = array_search(trim($nation), $allowed)) {
      $entity->setNation($key, TRUE);
      $entity->save();
    }

    if ($entity->get('nation')->isEmpty()) {
      $premises = $entity->getPremises(TRUE);
      if ($premises && !$premises->get('nation')->isEmpty()) {
        $entity->setNation($premises->get('nation')->getString(), TRUE);
        $entity->save();
      }
    }
  }
}

/**
 * Tidy up databases.
 */
function par_data_update_8028() {
  // Remove tables for test modules.
  $db = \Drupal::database();
  $tables_to_remove = ['watchdog', 'maillog', 'webprofiler'];
  foreach ($tables_to_remove as $table) {
    $exists = $db->schema()->tableExists($table);
    if ($exists) {
      $db->schema()->dropTable($table);
    }
  }

  // Ensure all file fields are up to date.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update to physical model includes new message entities.
 */
function par_data_update_8029() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Remove Enforcement Notices that were created in duplicate and that have no actions.
 */
function par_data_update_8030() {
  $par_data_manager = \Drupal::service('par_data.manager');

  // Retrieve all ENs with no actions.
  $conditions = [
    [
      'AND' => [
        ['field_enforcement_action', '', 'IS NULL'],
      ]
    ],
  ];
  $par_data_enforcement_notices = $par_data_manager->getEntitiesByQuery('par_data_enforcement_notice', $conditions);

  foreach ($par_data_enforcement_notices as $par_data_enforcement_notice) {
    if ($par_data_enforcement_notice->getEnforcementActions()) {
      continue;
    }
    // Permanently remove this entity.
    $par_data_enforcement_notice->destroy();
  }

  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Update all block entities to be resuable.
 */
function par_data_update_8031() {
  $blocks = \Drupal\block_content\Entity\BlockContent::loadMultiple();
  foreach ($blocks as $block) {
    $block->setReusable();
    $block->save();
  }
}

/**
 * Sync the old transform buckets to the new beis owned buckets.
 *
 * This is not ready to go until the new BEIS owned AWS S3 buckets are ready for production.
 */
function par_data_update_8032() {
  $private_old = getenv('TRANSFORM_BUCKET_PRIVATE');
  $public_old = getenv('TRANSFORM_BUCKET_PUBLIC');
  $region_old = getenv('TRANSFORM_REGION');
  $private_new = getenv('S3_BUCKET_PRIVATE');
  $public_new = getenv('S3_BUCKET_PRIVATE');
  $region_new = getenv('S3_REGION');

  // Configure AWS cli
  $access_key = getenv('S3_ACCESS_KEY');
  $secret_key = getenv('S3_SECRET_KEY');
  putenv("AWS_ACCESS_KEY_ID={$access_key}");
  putenv("AWS_SECRET_ACCESS_KEY={$secret_key}");

  // For Private files.
  if (!empty($private_new) && !empty($private_old)) {
    drush_shell_exec("aws s3 sync s3://{$private_old}/ s3://{$private_new}/ --source-region {$region_old} --region {$region_new}");
    drush_print(drush_shell_exec_output());
  }
  // For Public files.
  if (!empty($public_new) && !empty($public_old)) {
    drush_shell_exec("aws s3 sync s3://{$public_old}/ s3://{$public_new}/ --source-region {$region_old} --region {$region_new}");
    drush_print(drush_shell_exec_output());
  }
}

/**
 * Remove record of old entity which has been deleted but is still in the schema definition lists.
 */
function par_data_update_8033() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  $entity_definition_update_manager = \Drupal::service('entity.last_installed_schema.repository');
  $entity_definition_update_manager->deleteLastInstalledDefinition('par_data_regulatory_area');
}

/**
 * Set default the title value for advice entities that don't have title values.
 */
function par_data_update_8034() {
  $entity_definition_manager = \Drupal::service('entity.definition_update_manager');
  $config_factory = \Drupal::configFactory();
  $par_data_manager = \Drupal::service('par_data.manager');

  // New fields definitions to be added to the advice entity.
  // @see https://www.drupal.org/node/3034742
  $storage_definitions = [];

  // Advice Title.
  $storage_definitions['advice_title'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Advice Title'))
    ->setDescription(t('The title of the advice documents.'))
    ->setRequired(TRUE)
    ->setRevisionable(TRUE)
    ->setSettings([
      'max_length' => 255,
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 1,
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  // Advice archive reason.
  $storage_definitions['archive_reason'] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Archive Reason'))
    ->setDescription(t('Comments about why this advice document was archived.'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 13,
      'settings' => [
        'rows' => 25,
      ],
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ]);

  // Advice Status.
  $storage_definitions['advice_status'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Advice Status'))
    ->setDescription(t('The current status of the advice. For example, active, archived.'))
    ->addConstraint('par_required')
    ->setRevisionable(TRUE)
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 2,
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  foreach ($storage_definitions as $field => $definition) {
    $entity_definition_manager->installFieldStorageDefinition($field, 'par_data_advice', 'par_data_advice', $definition);
  }

  // Because the configuration hasn't been imported yet the status field value needs to be set manually.
  $configuration = $config_factory->getEditable('par_data.par_data_advice_type.advice')->get('configuration');
  $configuration['entity']['status_field'] = 'advice_status';
  $configuration['advice_status']['allowed_values'] = ['active' => 'Active'];
  $config_factory->getEditable('par_data.par_data_advice_type.advice')->set('configuration', $configuration)->save();

  // Get all advice entities.
  $par_data_advice_entities = $par_data_manager->getEntitiesByType('par_data_advice');

  foreach ($par_data_advice_entities as $par_data_advice) {
    $save = FALSE;

    // Set the title.
    $advice_type_value = $par_data_advice->get('advice_type')->getString();
    $advice_type = $par_data_advice->getTypeEntity()->getAllowedFieldlabel('advice_type', $advice_type_value);
    if ($advice_type && $par_data_advice->get('advice_title')->isEmpty()) {
      $par_data_advice->setAdviceTitle($advice_type);
      $save = TRUE;
    }
    // Set the status.
    if ($par_data_advice->getRawStatus() !== 'deleted') {
      $par_data_advice->setParStatus('active', TRUE);
      $save = TRUE;
    }
    // Set the issue date.
    $issue_date = $par_data_advice->get('issue_date')->getString();
    if (empty($issue_date) || !preg_match('/2\d{3}-\d{2}-\d{2}/', $issue_date)) {
      $timestamp = $par_data_advice->get('created')->value;
      $request_date = DrupalDateTime::createFromTimestamp($timestamp, NULL, ['validate_format' => FALSE]);
      $par_data_advice->set('issue_date', $request_date->format("Y-m-d"));
      $save = TRUE;
    }

    if ($save) {
      $par_data_advice->save();
    }
  }
}

/**
 * Request to update any titles that haven't already been updated to the filename.
 */
function par_data_update_8035() {
  $par_data_manager = \Drupal::service('par_data.manager');

  // There are multiple legacy ways of naming advice types (which have been transferred to the advice_titles).
  $conditions = [
    [
      'OR' => [
        ['advice_title', 'Primary Authority advice for the organisation', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'Primary authority advice to Business', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'Primary Authority advice to Local Authorities', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'Background information', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'General information', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'background_information', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'business_advice', 'LIKE'],
      ],
    ],
    [
      'OR' => [
        ['advice_title', 'authority_advice', 'LIKE'],
      ],
    ],
  ];

  $advice = $par_data_manager->getEntitiesByQuery('par_data_advice', $conditions, NULL, NULL, 'DESC', 'OR');

  foreach ($advice as $a) {
    $documents = $a->get('document')->referencedEntities();
    $document = !$a->get('document')->isEmpty() ? current($documents) : NULL;

    if ($document) {
      /* @var \Drupal\file\Entity\File $document */
      $filename = $document->getFilename();
      $sanitised = pathinfo($filename, PATHINFO_FILENAME);

      $a->setAdviceTitle($sanitised);
      $a->save();
    }
  }
}

/**
 * Base field updates for deleting entities.
 */
function par_data_update_8036() {

  $entity_definition_manager = \Drupal::service('entity.definition_update_manager');
  $entity_types = \Drupal::service('par_data.manager')->getParEntityTypes();

// New fields definitions to be added to the partnership entity.
// @see https://www.drupal.org/node/3034742
  $storage_definitions = [];

// Partnership delete reason.
  $storage_definitions['deleted_reason'] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Deleted Reason'))
    ->setDescription(t('Comments about why this partnership was deleted.'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 13,
      'settings' => [
        'rows' => 25,
      ],
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ]);

  foreach($entity_types as $entity_type_id => $entity_type) {
    foreach ($storage_definitions as $field => $definition) {
      $entity_definition_manager->installFieldStorageDefinition($field, $entity_type_id, $entity_type_id, $definition);
    }
  }
}

/**
 * Set new field definitions for inspection plan entities.
 */
function par_data_update_8037() {

  $entity_definition_manager = \Drupal::service('entity.definition_update_manager');

  // New fields definitions to be added to the inspection plan entity.
  // @see https://www.drupal.org/node/3034742
  $storage_definitions = [];

  // Inspection plan title.
  $storage_definitions['title'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Inspection plan title'))
    ->setDescription(t('The title of the inspection plan.'))
    ->setRequired(TRUE)
    ->setRevisionable(TRUE)
    ->setSettings([
      'max_length' => 255,
    ])
    ->setDefaultValue('')
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => 1,
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  // Inspection plan summary.
  $storage_definitions['summary'] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Inspection plan summary'))
    ->setDescription(t('Summary info for this inspection plan.'))
    ->setRequired(TRUE)
    ->addConstraint('par_required')
    ->setRevisionable(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 2,
      'settings' => [
        'rows' => 25,
      ],
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'text_default',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  foreach ($storage_definitions as $field => $definition) {
    $entity_definition_manager->installFieldStorageDefinition($field, 'par_data_inspection_plan', 'par_data_inspection_plan', $definition);
  }
}

/**
 * Set default inspection plan title values for legacy entities.
 */
function par_data_update_8038() {

  $par_data_manager = \Drupal::service('par_data.manager');

  $conditions = [
    [
      'AND' => [
        ['title', NULL, 'IS NULL'],
      ]
    ],
  ];

  // We should ensure deleted inspection plan entities are also setting default
  // titles as the client has a habit of re-activating deleted system entities.
  $inspection_plan_entities = $par_data_manager->getEntitiesByQuery('par_data_inspection_plan', $conditions, NULL, NULL, 'DESC', 'AND', FALSE);

  foreach ($inspection_plan_entities as $inspection_plan_entity) {
    $documents = $inspection_plan_entity->get('document')->referencedEntities();
    $document = !$inspection_plan_entity->get('document')->isEmpty() ? current($documents) : NULL;


    if ($document) {
      /* @var \Drupal\file\Entity\File $document */
      $filename = $document->getFilename();
      $sanitised = pathinfo($filename, PATHINFO_FILENAME);

      $inspection_plan_entity->setTitle($sanitised);
      $inspection_plan_entity->save();
    }
  }
}

/**
 * Base field updates for revoking entities.
 */
function par_data_update_8039() {

  $entity_definition_manager = \Drupal::service('entity.definition_update_manager');
  $entity_types = \Drupal::service('par_data.manager')->getParEntityTypes();

// New field definitions to be added to the system entities.
// @see https://www.drupal.org/node/3034742
  $storage_definitions = [];

  // Revocation Reason.
  $storage_definitions[ParDataEntity::REVOKE_REASON_FIELD] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Revocation Reason'))
    ->setDescription(t('Comments about why this entity was revoked.'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 13,
      'settings' => [
        'rows' => 25,
      ],
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  // Archive Reason.
  $storage_definitions[ParDataEntity::ARCHIVE_REASON_FIELD] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Archive Reason'))
    ->setDescription(t('Comments about why this entity was archived.'))
    ->setRevisionable(TRUE)
    ->setSettings([
      'text_processing' => 0,
    ])->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => 13,
      'settings' => [
        'rows' => 25,
      ],
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('view', TRUE);

  foreach($entity_types as $entity_type_id => $entity_type) {
    foreach ($storage_definitions as $field => $definition) {
      $entity_definition_manager->installFieldStorageDefinition($field, $entity_type_id, $entity_type_id, $definition);
    }
  }
}

/**
 * Base field updates for revoking entities.
 */
function par_data_update_8040() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * De-duplication of legal entities.
 */
function par_data_update_8041() {
  $legal_entities = \Drupal::service('par_data.manager')->getEntitiesByType('par_data_legal_entity');
  $companies_house_ids = [];
  $duplicate_entities = [];

  foreach ($legal_entities as $legal_entity) {
    if (in_array($legal_entity->getRegisteredNumber(), $companies_house_ids) && is_numeric($legal_entity->getRegisteredNumber())) {
      $duplicate_entities[$legal_entity->getRegisteredNumber()] = $legal_entity;
    }

    $companies_house_ids[] = $legal_entity->getRegisteredNumber();
  }

  foreach ($duplicate_entities as $registered_number => $duplicate_entity) {
    $duplicate_entity->mergeLegalEntities();
  }
}

/**
 * Removal of old 'soft-deleted' entities.
 */
function par_data_update_8042() {
  $par_data_manager = \Drupal::service('par_data.manager');

  foreach ($par_data_manager->getParEntityTypes() as $entity_type_id => $entity_type_definition) {
    $deleted_data = $par_data_manager->getEntitiesByProperty($entity_type_id, 'deleted', 1, FALSE);

    $par_data_manager->getEntityTypeStorage($entity_type_id)->delete($deleted_data);
  }
}

/**
 * PAR-1624 Make all email addresses on par_data_person entities lowercase.
 */
function par_data_update_8043() {
  $query = \Drupal::database()->query( "SELECT p.id as id FROM par_people_field_data AS p WHERE p.email!=LOWER(email);" );
  $results = array_keys($query->fetchAllAssoc('id'));
  if (!empty($results)) {
    $entities = \Drupal::entityTypeManager()->getStorage('par_data_person')->loadMultiple($results);
  }

  foreach ($entities as $entity) {
    // Re-saving the entity will automatically lowercase the email address.
    $entity->save();
  }
}

/**
 * PAR-1618 clean all par entity long text fields.
 */
function par_data_update_8044() {
  $par_data_manager = \Drupal::service('par_data.manager');

  foreach ($par_data_manager->getParEntityTypes() as $entity_type_id => $entity_type_definition) {
    foreach (\Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, '') as $field) {
      if ($field->getType() == 'text_long') {

        $field_name = $field->getName();
        // Get all partnerships that have the format issue within the about business field.
        $query = \Drupal::entityQuery($entity_type_id);
        $query->condition($field_name . '__value', ', basic_html', 'CONTAINS');
        $entity_ids = $query->execute();

        // Load all entities to be updated.
        $par_entities_to_update = \Drupal::entityTypeManager()->getStorage($entity_type_id)->loadMultiple($entity_ids);

        foreach ($par_entities_to_update as $par_data_entity) {
          // Strip out the custom format embedded in the text value.
          $par_data_entity->$field_name->value = str_replace(', basic_html', '', $par_data_entity->$field_name->value);
          $par_data_entity->save();
        }
      }
    }
  }
}

/**
 * PAR-1617 reset field values on legal entities.
 */
function par_data_update_8045() {

  $fields = [];
  $entity_definition_update_manager = \Drupal::service('entity.definition_update_manager');

  $field_legal_entity_type = $entity_definition_update_manager->getFieldStorageDefinition('registered_name', 'par_data_legal_entity');
  $field_legal_entity_type->addConstraint('par_required');
  $fields[] = $field_legal_entity_type;

  $field_registered_number = $entity_definition_update_manager->getFieldStorageDefinition('registered_number', 'par_data_legal_entity');
  $field_registered_number->addConstraint('par_required');
  $fields[] = $field_registered_number;

  foreach ($fields as $field) {
    $entity_definition_update_manager->updateFieldStorageDefinition($field);
  }
}
