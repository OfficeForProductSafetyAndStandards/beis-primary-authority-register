<?php

use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Link;
use Drupal\par_data\Entity\ParDataPerson;
use Drush\Queue\QueueInterface;
use RapidWeb\UkBankHolidays\Factories\UkBankHolidayFactory;
use Drupal\par_actions\Plugin\Factory\BusinessDaysCalculator;

/**
 * Implements hook_token_info().
 */
function par_actions_token_info() {
  $type = [
    'name' => t('PAR Invite'),
    'description' => t('PAR extended invite tokens.'),
    'needs-data' => 'invite'
  ];

  // Add custom par tokens to invitation.
  $invite['par:member-name'] = [
    'name' => t('PAR member name'),
    'description' => t('Name of the PAR Member.'),
    'dynamic' => TRUE,
  ];

  return [
    'types' => ['invite' => $type],
    'tokens' => ['invite' => $invite],
  ];
}

/**
 * Implements hook_tokens().
 */
function par_actions_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'invite') {

    $person = current($data['invite']->get('field_invite_par_person')->referencedEntities());
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'par:member-name':
          if ($person && $person instanceof ParDataPerson) {
            $replacements[$original] = $person->label();
          }
          break;

        default:
      }
    }
  }

  return $replacements;
}

function par_actions_cron() {
  $scheduler = \Drupal::service('plugin.manager.par_scheduler');

  foreach ($scheduler->getDefinitions() as $definition) {
    $plugin = $this->createInstance($definition['id'], $definition);
    $plugin->buildQueue();
  }
}

//function enforcement_notices_queue($job = NULL) {
//
//  // Find date to process.
//  $holidays = array_column(UkBankHolidayFactory::getAll(), 'date', 'date');
//
//  $calculator = new BusinessDaysCalculator(
//    new DateTime('now'),
//    $holidays,
//    [BusinessDaysCalculator::SATURDAY, BusinessDaysCalculator::SUNDAY]
//  );
//
//  $calculator->removeBusinessDays(4);
//
//  $query = \Drupal::entityQuery('par_data_enforcement_notice');
//  $query->condition('notice_date', $calculator->getDate()->format('Y-m-d'));
//
//
//  $query->condition('field_enforcement_action.entity.primary_authority_status', 'awaiting_approval');
//
//  $entities = $query->execute();
//
//  /** @var QueueFactory $queue_factory */
//  $queue_factory = \Drupal::service('queue');
//  /** @var QueueInterface $queue */
//  $queue = $queue_factory->get('cron_enforcement_notice_action_auto_approval');
//
//  foreach ($entities as $entity_id) {
//    $item = new \stdClass();
//    $item->id = $entity_id;
//    \Drupal::logger('par_actions')->notice("adding {$item->id} to queue");
//    $queue->createItem($item);
//  }
//
//}
