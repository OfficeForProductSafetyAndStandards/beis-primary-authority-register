<?php
/**
 * @file
 * Installation hooks for par_data_test module.
 */
use Drupal\par_data\Entity\ParDataEntityInterface;
use Drupal\Core\Serialization\Yaml;

/**
 * Implements hook_uninstall().
 */
function par_data_test_uninstall() {
  // Delete all the entities when we uninstall.
  // Must be removed before we do the final migration.
  // This should just be used for testing while we
  // have no other content in the database.
  $par_data_manager = \Drupal::service('par_data.manager');
  $serializer = \Drupal::service('serializer');

  $module_folder = \Drupal::moduleHandler()
      ->getModule('par_data_test')
      ->getPath() . '/content';
  $entity_folders = array_filter(scandir($module_folder), fn($item) => $item[0] !== '.');

  // Locate all test data uuids.
  $uuids = [];
  $uname = [];
  foreach ($entity_folders as $directory) {
    $entity_uuids = array_filter(scandir($module_folder . '/' . $directory), fn($item) => $item[0] !== '.');

    $uuids[$directory] = [];
    $uname[$directory] = [];
    foreach ($entity_uuids as $file_name) {
      $file_path = "$module_folder/$directory/$file_name";
      $contents = file_get_contents($file_path);
      $extension = pathinfo($file_path, PATHINFO_EXTENSION);

      // Allowing for the new version 2.x of default_content,
      // which supports yaml normalized entities.
      if ($extension == 'json') {
        $decoded = $serializer->decode($contents, 'hal_json');
        // Get the UUID to this entity.
        $uuids[$directory][] = $decoded['uuid'][0]['value'];
        // All PAR entities have a unique 'name' property that
        // should also be looked up.
        if (isset($decoded['default']['name'])) {
          $uname[$directory][] = $decoded['name'][0]['value'];
        }
      }
      elseif ($extension == 'yml') {
        $decoded = Yaml::decode($contents);
        // Get the UUID to this entity.
        $uuids[$directory][] = $decoded['_meta']['uuid'];
        // All PAR entities have a unique 'name' property that
        // should also be looked up.
        if (isset($decoded['default']['name'])) {
          $uname[$directory][] = $decoded['default']['name'][0]['value'];
        }
      }
      else {
        // Files are now stored in the default content folders and should
        // be ignored from importing directly.
        continue;
      }
    }
  }

  // Permanently delete all entities.
  foreach ($uuids as $entity_type => $uuids) {
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    $entities = [];
    foreach ($uuids as $uuid) {
      $entities += !empty($uuid) ? $storage->loadByProperties(['uuid' => $uuid]) : [];
    }

    foreach ($entities as $e) {
      if ($e instanceof ParDataEntityInterface) {
        // We need to bypass all checks and permanently remove this item.
        $e->annihilate();
      }
      else {
        $e->delete();
      }
    }
  }

  // Also remove any duplicate entities with the same name.
  foreach ($uname as $entity_type => $names) {
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    $entities = [];
    foreach ($names as $name) {
      $entities += !empty($uuid) ? $storage->loadByProperties(['name' => $name]) : [];
    }

    foreach ($entities as $e) {
      if ($e instanceof ParDataEntityInterface) {
        // We need to bypass all checks and permanently remove this item.
        $e->annihilate();
      }
      else {
        $e->delete();
      }
    }
  }
}
