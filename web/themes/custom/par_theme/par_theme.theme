<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_preprocess_page().
 *
 * @param array $variables
 */
function par_theme_preprocess_html(array &$variables) {
  // As per accessibility issue PAR-1545 page titles must not contain duplicate names.
  $title_fragments = isset($variables['head_title']['title']) ? explode('|', $variables['head_title']['title']) : NULL;
  $title_fragments = array_map('trim', $title_fragments);
  $name = (string) $variables['head_title']['name'] ?? '';
  // Remove the duplicate site name from the title.
  $title_fragments = array_filter($title_fragments, function($value) use ($name) {
    return $value !== $name;
  });
  // The second part of the title is the most important.
  if (count($title_fragments) > 1) {
    $secondary_title = array_shift($title_fragments);
    array_push($title_fragments, $secondary_title);
  }
  if (empty($title_fragments)) {
    unset($variables['head_title']['title']);
  }
  else {
    $variables['head_title']['title'] = implode(' | ', $title_fragments);
  }

  // Add override class to page to display PAR green branded app.
  if (Settings::get('par_branded_header_footer', FALSE)) {
    $variables['attributes']['class'][] = 'par-header-footer';
  }

}

/**
 * Implements hook_preprocess_fieldset().
 *
 * @param array $variables
 */
function par_theme_preprocess_fieldset(array &$variables) {

  $variables['child_count'] = isset($variables['element']['#options']) ?
                              count($variables['element']['#options']) : 0;

  // Get the form element.
  $element = &$variables['element'];

  // Pass elements disabled status to template.
  $variables['disabled'] = !empty($element['#attributes']['disabled']) ?
                            $element['#attributes']['disabled'] : NULL;

  // Initiate errors.
  $variables['errors'] = NULL;

  // Make {{ errors }} available in template file.
  if (!empty($element['#errors']) && empty($element['#error_use_parent'])) {
    $variables['errors'] = $element['#errors'];
  }

}

/**
 * Implements hook_preprocess_form_element().
 *
 * @param array $variables
 */
function par_theme_preprocess_form_element(array &$variables) {

  // Get the form element.
  $element = &$variables['element'];

  // Pass elements disabled status to template.
  $variables['disabled'] = !empty($element['#attributes']['disabled']) ?
                            $element['#attributes']['disabled'] : NULL;

  // Initiate errors.
  $variables['errors'] = NULL;

  // Make {{ errors }} available in template file.
  if (!empty($element['#errors']) && empty($element['#error_use_parent'])) {
    $variables['errors'] = $element['#errors'];
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function par_theme_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['name']) && isset($form['name']['#required']) && $form['name']['#required'] === TRUE) {
    $form['name']['#required'] = FALSE;
  }

  if (isset($form['pass']) && isset($form['pass']['#required']) && $form['pass']['#required'] === TRUE) {
    $form['pass']['#required'] = FALSE;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function par_theme_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['name']) && isset($form['name']['#required']) && $form['name']['#required'] === TRUE) {
    $form['name']['#required'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function par_theme_preprocess_block(&$vars) {
  if ($vars['derivative_plugin_id'] === 'account') {
    // This stops the block being cache in drupal 8.
    $vars['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function par_theme_page_attachments_alter(array &$attachments) {
  if (Settings::get('enable_tota11y', FALSE)) {
    $attachments['#attached']['library'][] = 'par_theme/tota11y';
  }
}
