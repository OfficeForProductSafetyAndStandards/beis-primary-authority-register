"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GeneratedExpression = function () {
  function GeneratedExpression(expression, parameterNames, parameterTypes) {
    _classCallCheck(this, GeneratedExpression);

    this._expression = expression;
    this._parameterNames = parameterNames;
    this._parameterTypes = parameterTypes;
  }

  _createClass(GeneratedExpression, [{
    key: "source",
    get: function get() {
      return this._expression;
    }

    /**
     * Returns an array of parameter names to use in generated function/method signatures
     *
     * @returns {Array.<String>}
     */

  }, {
    key: "parameterNames",
    get: function get() {
      return this._parameterNames;
    }

    /**
     * @returns {Array.<ParameterType>}
     */

  }, {
    key: "parameterTypes",
    get: function get() {
      return this._parameterTypes;
    }
  }]);

  return GeneratedExpression;
}();

module.exports = GeneratedExpression;