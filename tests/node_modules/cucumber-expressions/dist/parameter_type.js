'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ParameterType = function () {
  function ParameterType(name, constructorFunction, regexps, transform) {
    _classCallCheck(this, ParameterType);

    this._name = name;
    this._constructorFunction = constructorFunction;
    this._regexps = stringArray(regexps);
    this._transform = transform;
  }

  _createClass(ParameterType, [{
    key: 'transform',
    value: function transform(string) {
      return this._transform ? this._transform(string) : string;
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }
  }, {
    key: 'constructorFunction',
    get: function get() {
      return this._constructorFunction;
    }
  }, {
    key: 'regexps',
    get: function get() {
      return this._regexps;
    }
  }]);

  return ParameterType;
}();

function stringArray(regexps) {
  var array = Array.isArray(regexps) ? regexps : [regexps];
  return array.map(function (r) {
    return typeof r == 'string' ? r : r.source;
  });
}

module.exports = ParameterType;