version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.0

references:

  defaults: &defaults
    docker:
      - image: beispar/web:v2.0.0
        name: web
        environment:
          APP_ENV: ci

      - image: postgres:9.6.3
        environment:
          POSTGRES_USER: par
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: par

    environment:
      TEST_REPORTS: ~/par/tests/reports
      S3_ARTIFACTS_BUCKET: beis-par-artifacts
      SANITISED_DATABASE: drush-dump-production-sanitized-latest.sql
      SIMPLETEST_DB: pgsql://par:123456@localhost:5432/par

    working_directory: /var/www/html

  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  build:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: "Export environment variables"
          command: |
            echo "S3_REGION=$S3_REGION" >> .env
            echo "S3_ACCESS_KEY=$S3_ACCESS_KEY" >> .env
            echo "S3_SECRET_KEY=$S3_SECRET_KEY" >> .env
            echo "S3_BUCKET_ARTIFACTS=$S3_BUCKET_ARTIFACTS" >> .env
            echo "S3_BUCKET_PRIVATE=$S3_BUCKET_PRIVATE" >> .env
            echo "S3_BUCKET_PUBLIC=$S3_BUCKET_PUBLIC" >> .env
            echo "PAR_HASH_SALT=$PAR_HASH_SALT" >> .env
            echo "APP_ENV=$APP_ENV" >> .env
            echo "SENTRY_DSN=$SENTRY_DSN" >> .env
            echo "SENTRY_DSN_PUBLIC=$SENTRY_DSN_PUBLIC" >> .env
            echo "PAR_GOVUK_NOTIFY_KEY=$PAR_GOVUK_NOTIFY_KEY" >> .env
            echo "PAR_GOVUK_NOTIFY_TEMPLATE=$PAR_GOVUK_NOTIFY_TEMPLATE" >> .env
            echo "CLAMAV_HTTP_USER=$CLAMAV_HTTP_USER" >> .env
            echo "CLAMAV_HTTP_PASS=$CLAMAV_HTTP_PASS" >> .env

      - restore_cache:
          keys:
            - par-dependencies-{{ checksum "composer.json" }}-{{ checksum "package.json" }}

      - run:
          name: "Installing app"
          command: |
            echo "$(pwd)"
            composer install -v
            npm install
            npm run gulp
            cd ./tests && rm -rf node_modules && npm install

      - save_cache:
          key: par-dependencies-{{ checksum "composer.json" }}-{{ checksum "package.json" }}
          paths:
            - ./vendor
            - ./node_modules

      - run:
          name: "Configure web root"
          command: |
            sudo chown -R -L www-data:www-data /var/www/html/web
            ls -lah /var/www/html/web
            a2ensite par.localhost
            service apache2 restart
            echo 127.0.0.1 par.localhost | sudo tee -a /etc/hosts
            cat /etc/hosts

      - run:
          name: "Database preparation"
          command: |
            mkdir -p backups
            apt-get install sudo python-pip -y

      - aws-s3/copy:
          from: "s3://${S3_ARTIFACTS_BUCKET}/backups/${SANITISED_DATABASE}.tar.gz"
          to: backups/sanitised-db.sql
          arguments: '--region eu-west-1'

      - run:
          name: "Unpacking database"
          command: cd backups && tar --no-same-owner -zxvf sanitised-db.sql

      - run:
          name: "Importing database"
          command: cd web && ../vendor/bin/drush sql-cli @dev < ../backups/${SANITISED_DATABASE}

      - run:
          name: "Setup application"
          command: sh drupal-update.sh

      - run:
          name: "Run cron"
          command: |
            cd web
            ../vendor/bin/drush cron
            ../vendor/bin/drush cron
            ../vendor/bin/drush cron

      - run:
          name: "Application checklist"
          command: |
            cd web
            ../vendor/bin/drush cex -n
            ../vendor/bin/drush core-requirements --severity=2
            curl -sD - -o /dev/null http://par.localhost

      - run:
          name: "Install test dependencies"
          command: |
            cd tests
            mkdir -p ./reports/phpunit
            mkdir -p ./reports/nightwatch
            npm install
            npm run selenium-install

      - run:
          name: "Run unit tests"
          command: |
            ./vendor/bin/paratest --processes=16 --log-junit=${TEST_REPORTS}/phpunit.latest.xml

      - run:
          name: "Run feature tests"
          command: |
            cd tests
            npm run nightwatch-cucumber-circleci -- --tag ci
            npm run generate-report

      # Save artifacts
      - store_artifacts:
          path: /var/www/html/tests/reports
          destination: build

      # Upload test results
      - store_test_results:
          path: /var/www/html/tests/reports

      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy:
    <<: *defaults

    steps:
      - attach_workspace:
          at: .

      - run:
          name: "Make asset bundle"
          command: |
            rm -f .env
            rm -fr tests
            rm -fr backups
            mkdir /tmp/$CIRCLE_TAG
            tar -zcf /tmp/$CIRCLE_TAG/$CIRCLE_TAG.tar.gz .

workflows:
  version: 2.1
  build-test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
                - circleci

  deploy-staging:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - circleci
      - hold:
          type: approval
          requires:
            - build
      - deploy:
          requires:
            - hold
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - circleci

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build