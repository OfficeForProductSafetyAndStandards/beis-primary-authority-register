version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.0
  browser-tools: circleci/browser-tools@1.1.3

references:
  defaults: &defaults
    docker:
      - image: beispar/web:v4.2.7
        name: web
        environment:
          APP_ENV: ci
          SENTRY_ENVIRONMENT: ci

      - image: beispar/db:v1.0.3
        environment:
          POSTGRES_USER: par
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: par

      - image: opensearchproject/opensearch:1.2.4
        name: os.localhost
        environment:
          - cluster.name=opensearch-cluster
          - node.name=beis-par-search
          - discovery.seed_hosts=beis-par-search
          - cluster.initial_master_nodes=beis-par-search
          - DISABLE_INSTALL_DEMO_CONFIG=true # disables execution of install_demo_configuration.sh bundled with security plugin, which installs demo certificates and security configurations to OpenSearch
          - DISABLE_SECURITY_PLUGIN=true # disables security plugin entirely in OpenSearch by setting plugins.security.disabled: true in opensearch.yml

    resource_class: large

    environment:
      TEST_REPORTS: ~/par/tests/reports
      S3_ARTIFACTS_BUCKET: beis-par-artifacts
      SEED_DATABASE: db-dump-production-seed
      SANITISED_DATABASE: db-dump-production-sanitised
      UNSANITISED_DATABASE: db-dump-production-unsanitised
      SIMPLETEST_DB: pgsql://par:123456@localhost:5432/par

    working_directory: /var/www/html

  clean_working_directory: &clean_working_directory
    run:
      name: "Clean the default directory"
      command: |
        cd /
        rm -fr /var/www/html/
        mkdir -p /var/www/html/

  restore_code: &restore_code
    restore_cache:
      keys:
        - v11-repo-{{ .Branch }}-{{ .Revision }}

  restore_dependencies: &restore_dependencies
    restore_cache:
      keys:
        - v11-dependencies-{{ checksum "composer.lock" }}-{{ checksum "package-lock.json" }}--{{ checksum "web/themes/custom/par_theme/par_theme.libraries.yml" }}--{{ checksum "web/themes/custom/par_theme/par_theme.info.yml" }}

  restore_scaffold: &restore_scaffold
    run:
      name: "Install drupal scaffold files"
      command: |
        composer drupal:scaffold

  configure_webroot: &configure_webroot
    run:
      name: "Configure web root"
      command: |
        sudo chown -RhL www-data:www-data /var/www/html/web
        ls -lah /var/www/html/web
        a2ensite par.localhost
        service apache2 restart
        echo 127.0.0.1 par.localhost | sudo tee -a /etc/hosts
        cat /etc/hosts

  import_database: &import_database
    run:
      name: "Import & set up the database"
      command: |
        cd web
        ../vendor/bin/drush @par.dev sql:cli < ../backups/${SEED_DATABASE}.sql
        ../drupal-update.sh

  prepare_application: &prepare_application
    run:
      name: "Prepare the application"
      command: |
        cd web
        ../vendor/bin/drush cron
        ../scripts/cache-warmer.sh
        ../scripts/re-index.sh partnership_index --rebuild

  check_application: &check_application
    run:
      name: "Application checklist"
      command: |
        cd web
        ../vendor/bin/drush --yes --quiet config-split:export dev_config
        ../vendor/bin/drush --yes --quiet config-split:export test_config
        ../vendor/bin/drush --no --diff config:import
        ../vendor/bin/drush core-requirements --severity=2
        curl -sD - -o /dev/null http://par.localhost

  build_assets: &build_assets
    run:
      name: "Make asset bundle"
      command: |
        cd /tmp/workspace
        echo "{ \"build\" : \"${CIRCLE_BUILD_NUM}\", \"tag\":\"${CIRCLE_TAG}\", \"time\":\"$(date -u)\"}" > web/build_version.txt
        echo "SENTRY_RELEASE=$CIRCLE_TAG" >> .env
        tar -zcf /tmp/$CIRCLE_TAG.tar.gz .

  remove_assets: &remove_assets
    run:
      name: "Remove unwanted files from the asset bundle"
      command: |
        cd /tmp/workspace
        rm -fr /backups/*.sql
        rm -fr /tests

  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *restore_code
      - checkout:
          post:
            - git fetch --tags
      - run:
          name: "Export environment variables"
          command: |
            echo "S3_REGION=$S3_REGION" >> .env
            echo "S3_ACCESS_KEY=$S3_ACCESS_KEY" >> .env
            echo "S3_SECRET_KEY=$S3_SECRET_KEY" >> .env
            echo "S3_BUCKET_ARTIFACTS=$S3_BUCKET_ARTIFACTS" >> .env
            echo "S3_BUCKET_PRIVATE=$S3_BUCKET_PRIVATE" >> .env
            echo "S3_BUCKET_PUBLIC=$S3_BUCKET_PUBLIC" >> .env
            echo "PAR_HASH_SALT=$PAR_HASH_SALT" >> .env
            echo "APP_ENV=$APP_ENV" >> .env
            echo "SENTRY_ENVIRONMENT=$APP_ENV" >> .env
            echo "SENTRY_DSN=$SENTRY_DSN" >> .env
            echo "SENTRY_DSN_PUBLIC=$SENTRY_DSN_PUBLIC" >> .env
            echo "PAR_GOVUK_NOTIFY_KEY=$PAR_GOVUK_NOTIFY_KEY" >> .env
            echo "PAR_GOVUK_NOTIFY_TEMPLATE=$PAR_GOVUK_NOTIFY_TEMPLATE" >> .env
            echo "CLAMAV_HTTP_USER=$CLAMAV_HTTP_USER" >> .env
            echo "CLAMAV_HTTP_PASS=$CLAMAV_HTTP_PASS" >> .env
      - run:
          name: "Database preparation"
          command: |
            mkdir -p backups
      - aws-s3/copy:
          from: "s3://${S3_ARTIFACTS_BUCKET}/backups/${SEED_DATABASE}-latest.tar.gz"
          to: backups/${SEED_DATABASE}-latest.tar.gz
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0"
      - run:
          name: "Unpacking seed database"
          command: cd backups && tar --no-same-owner -zxvf ${SEED_DATABASE}-latest.tar.gz
      - aws-s3/copy:
          from: "s3://${S3_ARTIFACTS_BUCKET}/backups/${SANITISED_DATABASE}-latest.tar.gz"
          to: backups/${SANITISED_DATABASE}-latest.tar.gz
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0"
      - run:
          name: "Unpacking sanitised database"
          command: cd backups && tar --no-same-owner -zxvf ${SANITISED_DATABASE}-latest.tar.gz
      - save_cache:
          key: v11-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  compile_code:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *restore_code
      - *restore_dependencies
      - run:
          name: "Installing app"
          command: |
            echo "$(pwd)"
            composer install -v
            rm -f web/themes/contrib/govuk_theme/css/styles.css
            npm run install-govuk-theme
            npm run install-par-theme
            npm install
            npm run gulp
      - run:
          name: "Installing tests"
          command: |
            echo "$(pwd)"
            cd ./tests && rm -rf node_modules && npm install
      - *restore_scaffold
      - save_cache:
          key: v11-dependencies-{{ checksum "composer.lock" }}-{{ checksum "package-lock.json" }}--{{ checksum "web/themes/custom/par_theme/par_theme.libraries.yml" }}--{{ checksum "web/themes/custom/par_theme/par_theme.info.yml" }}
          paths:
            - ./node_modules
            - ./vendor
            - ./web/core
            - ./web/libraries
            - ./web/modules/contrib
            - ./web/profiles/contrib
            - ./web/themes/contrib
            - ./web/themes/custom
            - ./drush/contrib
      - run:
          name: "Create workspace"
          command: |
            mkdir -p /tmp/workspace
            cp -rT . /tmp/workspace
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  release_notes:
    <<: *defaults
    parameters:
    steps:
      - *clean_working_directory
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - run:
          name: "Add workflow url to build summary"
          command: |
            cd /tmp/workspace
            printf "https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID\n" >> build_summary.txt
      - run:
          name: "Write artifacts to github release"
          command: |
            cd /tmp/workspace
            # This is a work in progress, see https://circleci.com/developer/orbs/orb/circleci/github-cli && https://github.com/cli/cli/issues/1997

  test_smoke:
    <<: *defaults
    parameters:
    steps:
      - *clean_working_directory
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *import_database
      - *prepare_application
      - *check_application
      - run:
          name: "Install test dependencies"
          command: |
            cd tests
            mkdir -p ./reports/phpunit
            mkdir -p ./reports/nightwatch
            npm install
            npm run selenium-install
      - run:
          name: "Run unit tests"
          command: |
            ./vendor/bin/phpunit --testdox --no-coverage
      - run:
          name: "Run feature tests"
          command: |
            cd tests
            echo "Running smoke tests against default theme"
            npm run ci -- --tag ci
            npm run generate-report
      # Save artifacts
      - store_artifacts:
          path: /var/www/html/tests/reports
          destination: build

  test_full:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *import_database
      - *prepare_application
      - *check_application
      - run:
          name: "Install test dependencies"
          command: |
            cd tests
            mkdir -p ./reports/phpunit
            mkdir -p ./reports/nightwatch
            npm install
            npm run selenium-install
      - run:
          name: "Run unit tests"
          command: |
            ./vendor/bin/paratest --processes=16 --no-coverage
      - run:
          name: "Run feature tests"
          command: |
            cd tests
            echo "Running full tests against default theme"
            npm run ci -- --tag ci
            npm run generate-report
      # Save artifacts
      - store_artifacts:
          path: /var/www/html/tests/reports
          destination: build

  test_load:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *attach_workspace
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *build_assets
      - *remove_assets
      - run:
          name: "Examine asset bundle."
          command: |
            ls -lah /tmp/workspace
      - run:
          name: "Deploy to fresh load testing environment"
          command: |
            DEPLOY_ENV="test"
            UNIQUE_NAME=$(echo $CIRCLE_WORKFLOW_ID | head -c 6)
            printf "Deploying to test environment beis-par-$DEPLOY_ENV-$UNIQUE_NAME.cloudapps.digital\n"
            ./devops/cf/push.local.sh -T $CIRCLE_TAG -r -b /var/www/html/backups/${SANITISED_DATABASE}.sql -d /tmp/workspace $DEPLOY_ENV-$UNIQUE_NAME
      - run:
          name: "Wait for site to be ready for testing"
          command: |
            DEPLOY_ENV="test"
            UNIQUE_NAME=$(echo $CIRCLE_WORKFLOW_ID | head -c 6)
            SITE_URL="https://beis-par-${DEPLOY_ENV}-${UNIQUE_NAME}.cloudapps.digital"
            printf "Checking that $SITE_URL is ready to perform a load test\n"
            curl -s -o /dev/null -w "Response status: %{http_code}\n" $SITE_URL
            sleep 30;
      - run:
          name: "Run load test"
          command: |
            DEPLOY_ENV="test"
            UNIQUE_NAME=$(echo $CIRCLE_WORKFLOW_ID | head -c 6)
            printf "Running load test against beis-par-$DEPLOY_ENV-$UNIQUE_NAME.cloudapps.digital\n"
            set +e
            jmeter -n -t ./tests/nfr/jmeter/search_partnerships.jmx \
                -Jurl=beis-par-$DEPLOY_ENV-$UNIQUE_NAME.cloudapps.digital \
                -l ./tests/reports/jmeter/jmeter-log.jtl
            /opt/apache-jmeter-5.4.3/bin/JMeterPluginsCMD.sh --generate-csv ./tests/reports/jmeter/aggregate-report.csv \
                --input-jtl ./tests/reports/jmeter/jmeter-log.jtl  \
                --plugin-type AggregateReport
      - run:
          name: "Destroy the load testing environment."
          command: |
            DEPLOY_ENV="test"
            UNIQUE_NAME=$(echo $CIRCLE_WORKFLOW_ID | head -c 6)
            printf "Removing test environment beis-par-$DEPLOY_ENV-$UNIQUE_NAME.cloudapps.digital\n"
            ./devops/cf/destroy.app.sh $DEPLOY_ENV-$UNIQUE_NAME
      # Save artifacts
      - store_artifacts:
          path: /var/www/html/tests/reports
          destination: build

  deploy_stage:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *attach_workspace
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *import_database
      - *build_assets
      - *remove_assets
      - run:
          name: "Examine asset bundle."
          command: |
            ls -lah /tmp/workspace
      - aws-s3/copy:
          from: /tmp/${CIRCLE_TAG}.tar.gz
          to: "s3://${S3_ARTIFACTS_BUCKET}/builds/${CIRCLE_TAG}.tar.gz"
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0"
      - run:
          name: "Deploy to staging environment"
          command: |
            DEPLOY_ENV="staging"
            printf "$DEPLOY_ENV\n"
            ./devops/cf/push.local.sh -T $CIRCLE_TAG -r -b /var/www/html/backups/${SANITISED_DATABASE}.sql -d /tmp/workspace $DEPLOY_ENV

  deploy_prod:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *attach_workspace
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *import_database
      - *remove_assets
      - run:
          name: "Remove additional sensitive assets"
          command: |
            cd /tmp/workspace
            rm -fr backups
      - *build_assets
      - run:
          name: "Examine asset bundle"
          command: |
            ls -lah /tmp/workspace
      - run:
          name: "Deploy to production environment"
          command: |
            DEPLOY_ENV="production"
            printf "$DEPLOY_ENV\n"
            ./devops/cf/push.local.sh -T $CIRCLE_TAG -u $GOVUK_CF_USER -p $GOVUK_CF_PWD -x -d /tmp/workspace -i 4 $DEPLOY_ENV

  deploy_test:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *attach_workspace
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - *import_database
      - *build_assets
      - *remove_assets
      - run:
          name: "Examine asset bundle."
          command: |
            ls -lah /tmp/workspace
      - aws-s3/copy:
          from: /tmp/${CIRCLE_TAG}.tar.gz
          to: "s3://${S3_ARTIFACTS_BUCKET}/builds/${CIRCLE_TAG}.tar.gz"
          arguments: '--region eu-west-1'
      - run:
          name: "Deploy to test environment"
          command: |
            DEPLOY_ENV=($(echo $CIRCLE_TAG | awk -F '-' '{print $1}'))
            printf "Deploying to test environment: https://beis-par-$DEPLOY_ENV.cloudapps.digital\n"
            ./devops/cf/push.local.sh -T $CIRCLE_TAG -r -b /var/www/html/backups/${SANITISED_DATABASE}.sql -d /tmp/workspace $DEPLOY_ENV

  archive_database:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *restore_code
      - run:
          name: "Backup production database"
          command: |
            ./scripts/db-remote-backup.sh production -d "/tmp/backups" -u $PROD_GOVUK_CF_USER -p $PROD_GOVUK_CF_PWD
      - aws-s3/copy:
          from: "/tmp/backups/"
          to: "s3://${S3_ARTIFACTS_BUCKET}/backups/"
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0" \
            --recursive \
            --exclude="*" \
            --include "db-dump-*.tar.gz"

  sanitise_database:
    <<: *defaults
    steps:
      - *clean_working_directory
      - *restore_code
      - *restore_dependencies
      - *restore_scaffold
      - *configure_webroot
      - aws-s3/copy:
          from: "s3://${S3_ARTIFACTS_BUCKET}/backups/${UNSANITISED_DATABASE}-latest.tar.gz"
          to: "backups/${UNSANITISED_DATABASE}-latest.tar.gz"
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0"
      - run:
          name: "Unpacking database"
          command: cd backups && tar --no-same-owner -zxvf ${UNSANITISED_DATABASE}-latest.tar.gz
      - run:
          name: "Check db archive date"
          command: cd backups && ls -lah ${UNSANITISED_DATABASE}.sql
      - run:
          name: "Importing database"
          command: cd web && sed -e '/-- do not execute if not member of manager role/,+4d' < ../backups/${UNSANITISED_DATABASE}.sql | ../vendor/bin/drush @par.dev sql:cli
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Setup application"
          command: ./drupal-update.sh
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Run cron"
          command: |
            cd web
            ../vendor/bin/drush cron
          environment:
            APP_ENV: ci-sanitise
      - *check_application
      - run:
          name: "Un-install temporary data @temp"
          command: |
            cd web
            ../vendor/bin/drush pm-uninstall par_data_test -y
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Un-install dev only modules"
          command: |
            cd web
            ../vendor/bin/drush pm-uninstall webprofiler -y
            ../vendor/bin/drush pm-uninstall maillog -y
            ../vendor/bin/drush pm-uninstall dblog -y
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Sanitise database"
          command: |
            cd web
            ../vendor/bin/drush @par.paas sql:sanitize -y
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Backup sanitised database"
          command: ./scripts/db-backup.sh production -s -d "/tmp/backups" -a '@par.dev'
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Remove all user data"
          command: |
            cd web
            ../vendor/bin/drush @par.dev devel-generate:users --kill 0
          environment:
            APP_ENV: ci-sanitise
      - run:
          name: "Backup seed database"
          command: ./scripts/db-backup.sh production -z -d "/tmp/backups" -a '@par.seed'
          environment:
            APP_ENV: ci-sanitise
      - aws-s3/copy:
          from: "/tmp/backups/"
          to: "s3://${S3_ARTIFACTS_BUCKET}/backups/"
          arguments: |
            --region eu-west-1 \
            --cache-control "max-age=0" \
            --recursive \
            --exclude="*" \
            --include "db-dump-*.tar.gz"

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      - checkout_code:
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - master
      - compile_code:
          requires:
            - checkout_code
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - master
      - test_full:
          requires:
            - compile_code
          filters:
            tags:
              only: /^[a-zA-Z0-9]+.*/
            branches:
              ignore: /.*/
      - hold_stage:
          type: approval
          requires:
            - test_full
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_stage:
          requires:
            - hold_stage
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - hold_load_test:
          type: approval
          requires:
            - compile_code
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test_load:
          requires:
            - hold_load_test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - hold_prod:
          type: approval
          context: production
          requires:
            - deploy_stage
            - test_load
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_prod:
          context: production
          requires:
            - hold_prod
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test_smoke:
          requires:
            - compile_code
          filters:
            branches:
              ignore:
                - master
      - hold_test:
          type: approval
          requires:
            - compile_code
          filters:
            tags:
              only: /^[a-uw-zA-Z0-9]+.*/
            branches:
              ignore: /.*/
      - deploy_test:
          requires:
            - hold_test
          filters:
            tags:
              only: /^[a-uw-zA-Z0-9]+.*/
            branches:
              ignore: /.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_code
      - compile_code:
          requires:
            - checkout_code
      - test_full:
          requires:
            - compile_code

  db_archive:
    triggers:
      - schedule:
          cron: "0 0 * * 1,2,3,4,5"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_code
      - archive_database:
          requires:
            - checkout_code

  db_sanitise:
    triggers:
      - schedule:
          cron: "0 0 * * 1,2,3,4,5"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_code
      - compile_code:
          requires:
            - checkout_code
      - sanitise_database:
          requires:
            - compile_code
